<?php
 class Model { var $tablename; var $fields=array(); var $types=array(); var $PRI; var $data; var $autoid=false; var $sql=array(); var $string; var $DB=array(); var $res=null; var $record=array(); var $conn=0; var $objpoint=0; var $modelname; var $databasename; var $ismapper; function __construct() { $this->modelname=substr(get_class($this),0,-5); $this->DB=getConnect($this->tablename,$this->modelname,$this->conn); if(is_array($this->DB)) { } return $this; } function getMate() { $this->string="DESCRIBE ".$this->tablename; try{ $this->res=$this->DB['master']->query($this->string); $result = $this->res->fetchAll(PDO::FETCH_ASSOC); } catch (PDOException $e) { echo $e->getMessage(); } return $result; } function analyseTable() { $mate=$this->getMate(); if(is_array($mate)) { foreach($mate as $key=>$value) { $value['Field']=strtolower($value['Field']); if($value['Key']=='PRI') { $this->PRI=$value['Field']; if($value['Extra']=='auto_increment') $this->autoid=true; } $this->fields[$value['Field']]=$value['Default']; $this->types[$value['Field']]=$value['Type']; } } } function autoField() { $numargs = func_num_args(); if ($numargs==1&&is_array(func_get_arg(0))) { $prefields=func_get_arg(0); foreach($prefields as $k=>$v) { if(isset($this->fields[$v])) { $this->data[$v]=$_POST[$v]; } } } if(is_array(func_get_arg(0))) { $arg_list = func_get_args(); $arg0=func_get_arg(0); for ($i = 1; $i < $numargs; $i++) { if(isset($this->fields[$arg_list[$i]])) { $this->data[$v]=$arg0[$arg_list[$i]]; } } } return $this; } function __get($name) { if(isset($this->data[strtolower($name)])) { return $this->data[strtolower($name)]; }elseif(isset($this->mapper[$name])){ if(method_exists($this,$this->mapper[$name]['map'])) { echo $this->mapper[$name]['map']; call_user_func(array($this,$this->mapper[$name]['map']),$name); } $this->ismapper=true; return $this->maps[$mapper]=M($this->mapper[$name]['TargetModel']); }else{ if(count($this->record)>0) { $this->objpoint=0; $this->up(0); if(isset($this->data[strtolower($name)])) return $this->data[strtolower($name)]; } return null; } } function __set($name,$value) { if(isset($this->types[strtolower($name)])) { return $this->data[strtolower($name)]=$value; }elseif(isset($this->mapper[$name])){ $this->ismapper=true; $this->promaparray($name,$value); return $this; }else{ return null; } } function __isset($name) { return isset($this->data[strtolower($name)]); } private function __unset($name) { unset($this->data[strtolower($name)]); } function getArray() { $arg_list = func_get_args(); $arg_list=$arg_list[0]; $numargs=count($arg_list); $pkey=''; $fields="*"; $order=''; $i=0; if(strtoupper($arg_list[$i])=="FETCH_OBJ") { $returnobj=PDO::FETCH_OBJ; $i++; }else{ $returnobj=PDO::FETCH_ASSOC; } if(!is_numeric($arg_list[$i])) { if($arg_list[$i]!='') { $fields=$arg_list[$i]; $i=1; } } for (; $i < $numargs; $i++) { if(strtoupper($arg_list[$i])=="DESC"||strtoupper($arg_list[$i])=="ASC") { $order=" order by ".$this->PRI." ".strtoupper($arg_list[$i]); }else if(strtoupper($arg_list[$i])=="FETCH_OBJ"){ $returnobj=PDO::FETCH_OBJ; }else $pkey.=intval($arg_list[$i]).","; } if($pkey!='') $pkey=substr($pkey,0,-1); if($pkey=='') $pkey=1; $pkey=$this->PRI." IN (".$pkey.")"; if($this->sql['fields']!='') { $fields=$this->sql['fields']; } $this->string="select ".$fields." from ".$this->tablename." where ".$pkey.$order; try{ $res=$this->DB['slaves']->query($this->string); $this->record=$res->fetchAll($returnobj); $this->sql=array(); return $this; }catch (PDOException $e) { echo $e->getMessage(); } } function getAllArray() { $arg_list = func_get_args(); $arg_list=$arg_list[0]; $numargs=count($arg_list); $pkey=''; $fields="*"; $returnobj=PDO::FETCH_ASSOC; for ($i=0; $i < $numargs; $i++) { if(strtoupper($arg_list[$i])=="DESC"||strtoupper($arg_list[$i])=="ASC") { if($this->sql['orderby']=='') $this->sql['orderby']=" order by ".$this->PRI." ".strtoupper($arg_list[$i]); }else if(strtoupper($arg_list[$i])=="FETCH_OBJ"){ $returnobj=PDO::FETCH_OBJ; }else if(is_numeric($arg_list[$i])){ $this->where($this->PRI."='".$arg_list[$i]."'"); }else $fields=$arg_list[$i]; } if($this->sql['where']=='') $this->sql['where']=" where 1 "; if($this->sql['fields']!='') { $fields=$this->sql['fields']; } $this->string="select ".$fields." from ".$this->tablename." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby']; try{ $res=$this->DB['slaves']->query($this->string); $this->record=$res->fetchAll($returnobj); $this->sql=array(); return $this; }catch (PDOException $e) { echo $e->getMessage(); } } function pkidv() { if(strtolower(substr($this->types[$this->PRI],0,3))=='int') { return intval($this->data[$this->PRI]); } } function newRecord() { if($this->autoid) unset($this->data[$this->PRI]); return $this; } function copyRecord() { if($this->autoid) unset($this->data[$this->PRI]); return $this; } function updatemaper() { foreach($this->maparray as $m=>$v) { if(count($v)>0) { $mname=$this->mapper[$m]['TargetModel']; $tm=M($mname); foreach($v as $key=>$value) { $tm->setData($value); $tm->save(); $this->maparray[$m][$key][$tm->PRI]=$tm->pkid(); if($tm->PRI==$this->mapper[$m]['targetFiled']&&isset($this->mapper[$m]['localFiled'])) { $this->data[$this->mapper[$m]['localFiled']]=$tm->pkid(); } if(M($mname)->PRI==$this->mapper[$m]['targetFiled2']&&isset($this->mapper[$m]['localFiled2'])) { $this->data[$this->mapper[$m]['localFiled2']]=$tm->pkid(); } if(M($mname)->PRI==$this->mapper[$m]['targetFiled3']&&isset($this->mapper[$m]['localFiled3'])) { $this->data[$this->mapper[$m]['localFiled3']]=$tm->pkid(); } } } } return $this; } function updatemaperafter() { foreach($this->maparray as $m=>$v) { foreach($v as $key=>$value) { $mname=$this->mapper[$m]['TargetModel']; M($mname)->setData($value); if($this->PRI==$this->mapper[$m]['localFiled']&&isset($this->mapper[$m]['targetFiled'])) { M($mname)->data[$this->mapper[$m]['targetFiled']]=$this->pkid(); } if($this->PRI==$this->mapper[$m]['localFiled2']&&isset($this->mapper[$m]['targetFiled2'])) { M($mname)->data[$this->mapper[$m]['targetFiled2']]=$this->pkid(); } if($this->PRI==$this->mapper[$m]['localFiled3']&&isset($this->mapper[$m]['targetFiled3'])) { M($mname)->data[$this->mapper[$m]['targetFiled3']]=$this->pkid(); } M($mname)->save(); } } $this->maparray=array(); $this->ismapper=false; unset($this->ismapper); return $this; } function update() { $arglist=func_get_args(); $argnum=func_num_args(); if($argnum==0){ return $this->save(); } if(!is_array($arglist[0])&&!is_object($arglist[0])) { $filedarray=explode(",",$arglist[0]); if(is_array($arglist[1])) { $sql=""; $i=0; foreach($arglist[1] as $key=>$value) { if(is_numeric($key)) { if(isset($filedarray[$i])) $sql.=$filedarray[$i]."='".$value."',"; }else{ $sql.=$key."='".$value."',"; } $i++; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if($this->sql['where']=='') { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effactrow=$this->DB['master']->exec($this->string); } if(!isset($arglist[2])) { $this->setData($arglist[1]); } }elseif($arglist[1]==''){ $sql=""; foreach($filedarray as $value) { $sql.=$value."='".$this->data[$value]."',"; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if($this->sql['where']=='') { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effactrow=$this->DB['master']->exec($this->string); } } }elseif(is_array($arglist[0])){ $sql=""; foreach($arglist[0] as $key=>$value) { $sql.=$key."='".$value."',"; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if($this->sql['where']=='') { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effactrow=$this->DB['master']->exec($this->string); if(!isset($arglist[1])) { $this->setData($arglist[0]); } } }elseif(is_object($arglist[0])) { $objectname=get_class($arglist[0]); $objectname=substr($objectname,0,-5); $mapper=''; if(count($this->mapper)>0&&$objectname!='') { foreach($this->mapper as $k=>$v) { if($v['TargetModel']==$objectname) { $mapper=$k; break; } } if($mapper!='') { $this->setDataToMapper($mapper); M($objectname)->save(); $localfields=$this->setMapperToData($mapper)->getMapperlocalFields($mapper); if($localfields!='') $this->update($localfields); } } if($mapper=='') { $arrays=get_object_vars($arglist[0]); $sql=""; foreach($arrays as $key=>$value) { $sql.=$key."='".$value."',"; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if($this->sql['where']=='') { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effactrow=$this->DB['master']->exec($this->string); } if(!isset($arglist[1])) { $this->setData($arrays); } } } return $this; } public function getMappertargetFields($mapper) { $fileds=''; if(isset($this->mapper[$mapper]['targetFiled'])) $fileds=$this->mapper[$mapper]['targetFiled'].","; if(isset($this->mapper[$mapper]['targetFiled2'])) $fileds.=$this->mapper[$mapper]['targetFiled2'].","; if(isset($this->mapper[$mapper]['targetFiled3'])) $fileds.=$this->mapper[$mapper]['targetFiled3'].","; if($fileds!='') $fileds=substr($fileds,0,-1); return $fileds; } public function getMapperlocalFields($mapper) { $fileds=''; if(isset($this->mapper[$mapper]['localFiled'])) $fileds=$this->mapper[$mapper]['localFiled'].","; if(isset($this->mapper[$mapper]['localFiled2'])) $fileds.=$this->mapper[$mapper]['localFiled2'].","; if(isset($this->mapper[$mapper]['localFiled3'])) $fileds.=$this->mapper[$mapper]['localFiled3'].","; if($fileds!='') $fileds=substr($fileds,0,-1); return $fileds; } public function setMapperToData($mapper,$args=array(),$PRI=false) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(isset($this->mapper[$mapper]['localFiled'])) { if($this->PRI==$this->mapper[$mapper]['localFiled']) { if($PRI) $this->setData(array($this->mapper[$mapper]['localFiled']=>$this->maps[$mapper]->data[$this->mapper[$mapper]['targetFiled']])); }else{ $this->setData(array($this->mapper[$mapper]['localFiled']=>$this->maps[$mapper]->data[$this->mapper[$mapper]['targetFiled']])); } } if(isset($this->mapper[$mapper]['localFiled2'])) { if($this->PRI==$this->mapper[$mapper]['localFiled2']) { if($PRI) $this->setData(array($this->mapper[$mapper]['localFiled2']=>$this->maps[$mapper]->data[$this->mapper[$mapper]['targetFiled2']])); }else{ $this->setData(array($this->mapper[$mapper]['localFiled2']=>$this->maps[$mapper]->data[$this->mapper[$mapper]['targetFiled2']])); } } if(isset($this->mapper[$mapper]['localFiled3'])) { if($this->PRI==$this->mapper[$mapper]['localFiled3']) { if($PRI) $this->setData(array($this->mapper[$mapper]['localFiled3']=>$this->maps[$mapper]->data[$this->mapper[$mapper]['targetFiled3']])); }else{ $this->setData(array($this->mapper[$mapper]['localFiled3']=>$this->maps[$mapper]->data[$this->mapper[$mapper]['targetFiled3']])); } } if(!Empty($args)) $this->setData($args); return $this; } function save($id=null) { $pkey=''; $mapper=''; if($id=='add'||$id=='new') { }else if(is_numeric($id)) { $pkey=$this->PRI."='".intval($id)."'"; unset($this->data[$this->PRI]); }else if($id=='all') { $pkey='1'; unset($this->data[$this->PRI]); }elseif(is_array($id)){ $this->setData($id); if(isset($this->data[$this->PRI])) $pkey=$this->PRI."='".$this->pkidv()."'"; }elseif(is_object($id)){ if($id->modelname!=$this->modelname&&count($this->mapper)>0) { foreach($this->mapper as $k=>$v) { if($id->modelname==$v['TargetModel']) { $mapper=$k; $prearray=''; $this->maps[$mapper]=M($v['TargetModel']); if(isset($this->data[$v['localFiled']])&&$this->data[$v['localFiled']]!='') { if(M($v['TargetModel'])->PRI==$v['targetFiled']&&$this->data[$v['localFiled']]==0) { $prearray=$v['targetFiled']; }else{ M($v['TargetModel'])->$v['targetFiled']=$this->data[$v['localFiled']]; $saveafter=true; } } if(isset($v['localFiled2'])&&isset($this->data[$v['localFiled2']])&&$this->data[$v['localFiled2']]!='') { if(M($v['TargetModel'])->PRI==$v['targetFiled2']&&$this->data[$v['localFiled2']]==0) { $prearray=$v['targetFiled2']; }else{ M($v['TargetModel'])->$v['targetFiled2']=$this->data[$v['localFiled2']]; $saveafter=true; } } if(isset($v['localFiled3'])&&isset($this->data[$v['localFiled3']])&&$this->data[$v['localFiled3']]!='') { if(M($v['TargetModel'])->PRI==$v['targetFiled3']&&$this->data[$v['localFiled3']]==0) { $prearray=$v['targetFiled3']; }else{ M($v['TargetModel'])->$v['targetFiled3']=$this->data[$v['localFiled3']]; $saveafter=true; } } if($saveafter) { M($v['TargetModel'])->save(); if($prearray!='') $this->data[$prearray]=M($v['TargetModel'])->pkid(); unset($saveafter); } break; } } } }elseif(is_numeric($this->data[$this->PRI])) { if($this->data[$this->PRI]==0) unset($this->data[$this->PRI]); else $pkey=$this->PRI."='".$this->pkidv()."'"; } if($this->ismapper&&count($this->maparray)>0) { $this->updatemaper(); } if($pkey=='') { if($this->autoid) unset($this->data[$this->PRI]); foreach($this->fields as $k=>$v) { if($v!=''&&!isset($this->data[$k])) { if($this->types[$k]=='date') { $this->data[$k]=date("Y-m-d"); }else if($this->types[$k]=='datetime') { $this->data[$k]=date("Y-m-d H:i:s"); }else{ $this->data[$k]=$v; } } if($this->types[$k]=='date'&&!isset($this->data[$k])) { $this->data[$k]=date("Y-m-d"); }else if($this->types[$k]=='datetime') { $this->data[$k]=date("Y-m-d H:i:s"); } } $this->string="INSERT INTO `".$this->tablename."` ("; $i=0; $temp=''; foreach($this->data as $key=>$value) { if($i==0) { $this->string.="`".$key."`"; $temp="'".$value."'"; }else { $this->string.=",`".$key."`"; $temp.=",'".$value."'"; } $i++; } $this->string.=") VALUES(".$temp.")"; try{ $this->DB['master']->exec($this->string); $this->sql=array(); }catch (PDOException $e) { echo $e->getMessage(); } if(isset($this->types[$this->PRI])) { $this->data[$this->PRI]=$this->DB['master']->lastInsertId(); } }else{ $this->string="UPDATE ".$this->tablename." set "; $i=0; foreach($this->data as $key=>$value) { if($i==0) { $this->string.=$key."='".$value."'"; }else { $this->string.=",".$key."='".$value."'"; } $i++; } if($this->sql['where']!='') { $pkey.=" and ".substr($this->sql['where'],6,-1); } $this->string.=" where ".$pkey; $this->sql=array(); $this->effactrow=$this->DB['master']->exec($this->string); } if($mapper!='') { $afterkey=''; if(isset($this->data[$this->mapper[$mapper]['localFiled']])&&$this->data[$this->mapper[$mapper]['localFiled']]!='') { if($this->PRI==$this->mapper[$mapper]['localFiled']) $afterkey=$this->mapper[$mapper]['targetFiled']; } if(isset($this->mapper[$mapper]['localFiled2'])&&isset($this->data[$this->mapper[$mapper]['localFiled2']])&&$this->data[$this->mapper[$mapper]['localFiled2']]!='') { if($this->PRI==$this->mapper[$mapper]['localFiled2']) $afterkey=$this->mapper[$mapper]['targetFiled2']; } if(isset($this->mapper[$mapper]['localFiled3'])&&isset($this->data[$this->mapper[$mapper]['localFiled3']])&&$this->data[$this->mapper[$mapper]['localFiled3']]!='') { if($this->PRI==$this->mapper[$mapper]['localFiled3']) $afterkey=$this->mapper[$mapper]['targetFiled3']; } if($afterkey!='') { $this->maps[$mapper]->data[$afterkey]=$this->pkidv(); $this->maps[$mapper]->save(); } unset($pkey); unset($mapper); unset($saveafter); unset($afterkey); } if($this->ismapper&&count($this->maparray)>0) { $this->updatemaperafter(); } return $this; } function pkid($id=null) { if($id!=null) { $this->data[$this->PRI]=intval($id); return $this; } if(isset($this->data[$this->PRI])) return $this->data[$this->PRI]; else null; } function select($name) { $this->sql['fields'].=$name; return $this; } function from($name='') { if($name==''){ $this->sql['from']=$this->tablename; }else{ if(M($name)->tablename!=$this->tablename) { $this->sql['from']=$this->getDataBaseName().".".$this->tablename.",".M($name)->getDataBaseName().".".M($name)->tablename; }else $this->sql['from']=$this->tablename; } return $this; } function leftjoin($name,$one=null) { if($one==null) { $this->sql['from']=$this->getDataBaseName().".".$this->tablename." as ".$this->modelname." LEFT JOIN ".M($name)->getDataBaseName().".".M($name)->tablename." as ".M($name)->modelname; }else{ $this->sql['from'].=" LEFT JOIN ".M($name)->getDataBaseName().".".M($name)->tablename." as ".M($name)->modelname; } return $this; } function joinon($name) { $this->sql['from']=$this->sql['from']." ON ".$name; return $this; } function orderby($name) { $this->sql['orderby']=" order by ".$name; return $this; } function groupby($name) { $this->sql['groupby']=" group by ".$name; return $this; } function where($name,$value='') { if($value!='') $this->sql['where']=" where ".$name."='".$value."'"; else $this->sql['where']=" where ".$name; return $this; } function whereIn($name,$value) { if($this->sql['where']=='') $this->sql['where']=" where ".$name." IN (".$value.")"; else $this->sql['where'].=" and ".$name." IN (".$value.")"; return $this; } function whereLike($name,$value) { if($this->sql['where']=='') $this->sql['where']=" where ".$name." like ('".$value."')"; else $this->sql['where'].=" and ".$name." like ('".$value."')"; return $this; } function whereOr($name,$value='') { if($this->sql['where']=='') $this->sql['where']=" where "; else $this->sql['where'].=" OR "; if($value!='') $this->sql['where'].=$name."='".$value."'"; else $this->sql['where'].=$name; return $this; } function whereAnd($name,$value='') { if($this->sql['where']=='') $this->sql['where']=" where "; else $this->sql['where'].=" and "; if($value!='') $this->sql['where'].=$name."='".$value."'"; else $this->sql['where'].=$name; return $this; } function limit($start,$end=null) { $this->sql['limit']=" limit ".intval($start); if($end!=null) $this->sql['limit'].=",".intval($end); return $this; } function colupdate($colname,$num=1) { if(isset($this->types[$colname])) { $this->string="update ".$this->tablename." set "."`$colname`=`$colname`+".intval($num)." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby']; try{ $res=$this->DB['master']->exec($this->string); $this->sql=array(); return $res; }catch (PDOException $e) { echo $e->getMessage(); } }else{ return false; } } function Totalnum() { $pfields="*"; if(isset($this->types[$this->PRI])) $pfields=$this->PRI; $this->string="select count(".$pfields.") as totalnum from ".$this->tablename." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby']; try{ $res=$this->DB['master']->query($this->string); $total=$res->fetch(PDO::FETCH_ASSOC); $this->sql=array(); return $total['totalnum']; }catch (PDOException $e) { echo $e->getMessage(); } return 0; } function getData($obj='') { if(count($this->data)>0) { if($obj='Object') return new ArrayObject($this->data); else return $this->data; } $this->up(0); if(count($this->data)>0) { if($obj='Object') return new ArrayObject($this->data); else return $this->data; }else{ return $this; } } function setData($caseArray) { if(is_array($caseArray)) { foreach($caseArray as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } return $this; }else{ return null; } } function clear() { $this->string="TRUNCATE TABLE `".$this->tablename."`"; $this->sql=array(); return $this->DB['master']->exec($this->string); } function delete($id='') { if(is_numeric($id)) { if($this->sql['where']=='') { $this->where($this->PRI."='".$id."'"); }else{ $this->whereAnd($this->PRI."='".$id."'"); } $this->string="DELETE from ".$this->tablename." ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); return $this->DB['master']->exec($this->string); }else if($id=='all') { $this->string="TRUNCATE TABLE `".$this->tablename."`"; $this->sql=array(); return $this->DB['master']->exec($this->string); }else{ if($this->sql['where']=='') { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string="DELETE from ".$this->tablename." ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); return $this->DB['master']->exec($this->string); } } function reset() { $this->objpoint=0; $this->recordend=false; unset($this->recordend); return $this; } function next() { if(count($this->record)>=$this->objpoint){ $this->objpoint=count($this->record); return $this; }else{ $this->objpoint++; return $this; } } function isEmpty() { if(count($this->record)==0) return true; } function isEnd() { if(count($this->record)==$this->objpoint){ $this->recordend=true; return true; }else{ return false; } } function up($id=null) { if($this->recordend==true){ unset($this->data); return $this; } if(is_array($this->record)) { if($id!=null) $this->objpoint=$id; if(is_object($this->record[$this->objpoint])) { $temp=get_object_vars($this->record[$this->objpoint]); foreach($temp as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } }else if(is_array($this->record[$this->objpoint])) { foreach($this->record[$this->objpoint] as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } } }else if(is_object($this->record)){ $temp=get_object_vars($this->record); foreach($temp as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } } return $this; } function query($string,$ms='') { $this->string=$string; $this->sql=array(); if(empty($ms)) return $this->DB['master']->query($this->string); else return $this->DB['slaves']->query($this->string); } function fetch($fetchobj='') { if($this->sql['fields']!='') { $pfields=$this->sql['fields']; }else{ $pfields="*"; } if($this->sql['from']=='') { $this->sql['from']=$this->tablename; } if($this->sql['where']=='') { if(isset($this->data[$this->PRI])&&is_numeric($this->data[$this->PRI])) $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string="select ".$pfields." from ".$this->sql['from']." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby'].$this->sql['limit']; try{ $res=$this->DB['slaves']->query($this->string); if($fetchobj=='FETCH_OBJ') { $fetchobj=PDO::FETCH_OBJ; }else{ $fetchobj=PDO::FETCH_ASSOC; } $this->record=$res->fetchAll($fetchobj); $this->sql=array(); return $this; }catch (PDOException $e) { echo $e->getMessage(); } } function getDataBaseName() { if($this->databasename) return $this->databasename; $this->string="SELECT DATABASE() AS name"; $res=$this->DB['slaves']->query($this->string); $database=$res->fetch(PDO::FETCH_ASSOC); $this->databasename=$database['name']; return $database['name']; } function getTableName() { return $this->tablename; } function mapsFileds() { $numargs = func_num_args(); $fileds=func_get_args(); $selectfiled=''; for ($i = 0; $i < $numargs; $i++) { $selectfiled.=$this->modelname.".".$fileds[$i]." as".$this->modelname.$fileds[$i]. ","; } if($selectfiled!='') $selectfiled=substr($selectfiled, 0, -1); else $selectfiled=$this->modelname.".*"; $this->sql['mapsfiled']=$selectfiled; return $this; } function ManyhasMany($mapper,$relation=array()) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(count($relation)>0) { $fileds=implode(",",$relation); } if(is_array($this->record)&&isset($this->record[0])) { $n=count($this->record); for($i=0;$i<$n;$i++) { $this->maps[$mapper]->select($fileds); $this->maps[$mapper]->where($this->mapper[$mapper]['targetFiled']."='".$this->record[$i][$this->mapper[$mapper]['localFiled']]."'"); if(isset($this->mapper[$mapper]['targetFiled2'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled2']."='".$this->record[$i][$this->mapper[$mapper]['localFiled2']]."'"); } if(isset($this->mapper[$mapper]['targetFiled3'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled3']."='".$this->record[$i][$this->mapper[$mapper]['localFiled3']]."'"); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->up(); $this->sql=array(); $this->record[$i][$mapper]=$this->maps[$mapper]->record; }catch (PDOException $e) { echo $e->getMessage(); } } }elseif(is_array($this->record)) { $this->maps[$mapper]->where($this->mapper[$mapper]['targetFiled']."='".$this->record[$this->mapper[$mapper]['localFiled']]."'"); if(isset($this->mapper[$mapper]['targetFiled2'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled2']."='".$this->record[$i][$this->mapper[$mapper]['localFiled2']]."'"); } if(isset($this->mapper[$mapper]['targetFiled3'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled3']."='".$this->record[$i][$this->mapper[$mapper]['localFiled3']]."'"); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->up(); $this->sql=array(); $this->record[$mapper]=$this->maps[$mapper]->record; }catch (PDOException $e) { echo $e->getMessage(); } } return $this; } function hasMany($mapper,$relation=array()) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(count($relation)>0) { $fileds=implode(",",$relation); $this->maps[$mapper]->select($fileds); } $this->maps[$mapper]->where($this->mapper[$mapper]['targetFiled']."='".$this->data[$this->mapper[$mapper]['localFiled']]."'"); if(isset($this->mapper[$mapper]['targetFiled2'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled2']."='".$this->data[$this->mapper[$mapper]['localFiled2']]."'"); } if(isset($this->mapper[$mapper]['targetFiled3'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled3']."='".$this->data[$this->mapper[$mapper]['localFiled3']]."'"); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->up(); $this->sql=array(); if(is_array($this->record)&&isset($this->record[0])) { $n=count($this->record); for($i=0;$i<$n;$i++) { $this->record[$i][$mapper]=$this->maps[$mapper]->record; } }elseif(is_array($this->record)){ $this->record[$mapper]=$this->maps[$mapper]->record; } return $this; }catch (PDOException $e) { echo $e->getMessage(); } } function hasOne($mapper,$relation=array()) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(count($relation)>0) { $fileds=implode(",",$relation); $this->maps[$mapper]->select($fileds); } $this->maps[$mapper]->where($this->mapper[$mapper]['targetFiled']."='".$this->data[$this->mapper[$mapper]['localFiled']]."'")->limit(1); if(isset($this->mapper[$mapper]['targetFiled2'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled2']."='".$this->record[$i][$this->mapper[$mapper]['localFiled2']]."'"); } if(isset($this->mapper[$mapper]['targetFiled3'])) { $this->maps[$mapper]->whereAnd($this->mapper[$mapper]['targetFiled3']."='".$this->record[$i][$this->mapper[$mapper]['localFiled3']]."'"); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->up(); $this->sql=array(); if(is_array($this->record)&&isset($this->record[0])) { $n=count($this->record); for($i=0;$i<$n;$i++) { $this->record[$i][$mapper]=$this->maps[$mapper]->record; } }elseif(is_array($this->record)){ $this->record[$mapper]=$this->maps[$mapper]->record; } return $this; }catch (PDOException $e) { echo $e->getMessage(); } } function getArrayFormField($data='') { if($data=='') $data=$this->data; $t=array(); foreach($this->types as $k=>$v) { if(isset($data[$k])) $t[$k]=$data[$k]; } return $t; } function promaparray($mapper,$maparray) { if(empty($maparray)) return $this; $mapmodel=$this->mapper[$mapper]['TargetModel']; $mpi=count($this->maparray[$mapper]); foreach($maparray as $k=>$v) { if(isset(M($mapmodel)->types[$k])) { $this->maparray[$mapper][$mpi][$k]=$v; $mpi++; }elseif(is_array($v)) { $this->maparray[$mapper][]=M($mapmodel)->getArrayFormField($v); }elseif(is_object($v)) { $this->maparray[$mapper][]=M($mapmodel)->getArrayFormField(get_object_vars($v)); } } foreach($this->maparray[$mapper] as $k=>$v) { if(isset(M($mapmodel)->types[$this->mapper[$mapper]['targetFiled']])&&!isset($this->maparray[$mapper][$k][$this->mapper[$mapper]['targetFiled']])) { $this->maparray[$mapper][$k][$this->mapper[$mapper]['targetFiled']]=$this->data[$this->mapper[$mapper]['localFiled']]; } if(isset(M($mapmodel)->types[$this->mapper[$mapper]['targetFiled2']])&&!isset($this->maparray[$mapper][$k][$this->mapper[$mapper]['targetFiled2']])) { $this->maparray[$mapper][$k][$this->mapper[$mapper]['targetFiled2']]=$this->data[$this->mapper[$mapper]['localFiled2']]; } if(isset(M($mapmodel)->types[$this->mapper[$mapper]['targetFiled3']])&&!isset($this->maparray[$mapper][$k][$this->mapper[$mapper]['targetFiled3']])) { $this->maparray[$mapper][$k][$this->mapper[$mapper]['targetFiled3']]=$this->data[$this->mapper[$mapper]['localFiled3']]; } } return $this; } public function setDataToMapper($mapper,$args=array(),$PRI=false) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(isset($this->mapper[$mapper]['targetFiled'])) { if($this->maps[$mapper]->PRI==$this->mapper[$mapper]['targetFiled']) { if($PRI) $this->maps[$mapper]->setData(array($this->mapper[$mapper]['targetFiled']=>$this->data[$this->mapper[$mapper]['localFiled']])); }else{ $this->maps[$mapper]->setData(array($this->mapper[$mapper]['targetFiled']=>$this->data[$this->mapper[$mapper]['localFiled']])); } } if(isset($this->mapper[$mapper]['targetFiled2'])) { if($this->maps[$mapper]->PRI==$this->mapper[$mapper]['targetFiled2']) { if($PRI) $this->maps[$mapper]->setData(array($this->mapper[$mapper]['targetFiled2']=>$this->data[$this->mapper[$mapper]['localFiled2']])); }else{ $this->maps[$mapper]->setData(array($this->mapper[$mapper]['targetFiled2']=>$this->data[$this->mapper[$mapper]['localFiled2']])); } } if(isset($this->mapper[$mapper]['targetFiled3'])) { if($this->maps[$mapper]->PRI==$this->mapper[$mapper]['targetFiled3']) { if($PRI) $this->maps[$mapper]->setData(array($this->mapper[$mapper]['targetFiled3']=>$this->data[$this->mapper[$mapper]['localFiled3']])); }else{ $this->maps[$mapper]->setData(array($this->mapper[$mapper]['targetFiled3']=>$this->data[$this->mapper[$mapper]['localFiled3']])); } } if(!Empty($args)) $this->maps[$mapper]->setData($args); return $this; } function __call($name,$Args) { if($name=='get') return $this->getArray($Args); if($name=='getAll') return $this->getAllArray($Args); if(isset($this->mapper[$name])){ $this->maps[$name]=M($this->mapper[$name]['TargetModel']); if(is_array($Args[0])) { $this->setDataToMapper($name,$Args[0]); }elseif(method_exists($this,$this->mapper[$name]['map'])) { call_user_func(array($this,$this->mapper[$name]['map']),$name,$Args); } return $this->maps[$mapper]; } if(strtolower(substr($name,0,3))=='set') { $str=substr($name,3); if(isset($this->types[strtolower($str)])) { $this->data[$str]=$Args['0']; return $this; } } if(strtolower(substr($name,0,3))=='get') { $str=substr($name,3); if(isset($this->types[strtolower($str)])) { return $this->data[$str]; } } if(substr($name,0,5)=='where') { $sub=substr($name,5); if(isset($this->types[strtolower($sub)])) { return $this->where($sub."='".$Args['0']."'"); }else{ $substr=explode("And",$sub); if(isset($this->types[strtolower($substr[0])])) { $temp=''; $i=0; if(is_array($Args[0])) { $Args=explode(",",$Args[0][0]); }else if(count($Args)<2){ $Args=explode(",",$Args[0]); } foreach($substr as $key=>$value) { if(isset($this->types[strtolower($value)])) { if($i==0) { $temp.=$value."='".$Args[$i]."'"; }else { $temp.=" and ".$value."='".$Args[$i]."'"; } $i++; } } if($temp!='') return $this->where($temp); } } } } } 
 function pdoconnects($dsn,$connmodel) { try { $GLOBALS['pdolinks'][$connmodel]=new PDO($dsn['dsn'],$dsn['username'],$dsn['password']); $GLOBALS['pdolinks'][$connmodel]->exec('SET CHARACTER SET '.$dsn['CHARACTER']); return $GLOBALS['pdolinks'][$connmodel]; } catch (PDOException $e) { print "connects Error!: " . $e->getMessage() . "<br/>"; } } function getConnect($table,$model=null,$connper=0) { $conn=$GLOBALS['config']['pdoconn']; $tconn=array(); if(is_array($conn)) { foreach($conn as $k=>$v) { if($k==$model||preg_match("|".$k."|i",$table)||preg_match("|".$k."|i",$model)) { $prand=rand(0,count($v["master"])-1); $connmodel=md5(json_encode($v["master"][$prand])); if($GLOBALS['pdolinks'][$connmodel]!='') $tconn['master']=$GLOBALS['pdolinks'][$connmodel]; else { $tconn['master']=pdoconnects($v["master"][$prand],$connmodel); } $prand=rand(0,count($v["slaves"])-1); $connmodel=md5(json_encode($v["slaves"][$prand])); if($GLOBALS['pdolinks'][$connmodel]!='') $tconn['slaves']=$GLOBALS['pdolinks'][$connmodel]; else { $tconn['slaves']=pdoconnects($v["slaves"][$prand],$connmodel); } } } } if(count($tconn)<2) { $prand=rand(0,count($conn['default']["master"])-1); $connmodel=md5(json_encode($conn['default']["master"][$prand])); if($GLOBALS['pdolinks'][$connmodel]!='') { $tconn['master']=$GLOBALS['pdolinks'][$connmodel]; }else{ $tconn['master']=pdoconnects($conn['default']["master"][$prand],$connmodel); } $prand=rand(0,count($conn['default']["slaves"])-1); $connmodel=md5(json_encode($conn['default']["slaves"][$prand])); if($GLOBALS['pdolinks'][$connmodel]!='') $tconn['slaves']=$GLOBALS['pdolinks'][$connmodel]; else { $tconn['slaves']=pdoconnects($conn['default']["slaves"][$prand],$connmodel); } } if($connper==1) { return array('master'=>$tconn['master'],'slaves'=>$tconn['slaves']); }else if($connper==0) { return array('master'=>$tconn['master'],'slaves'=>$tconn['master']); } } function P($name) { if(isset($GLOBALS['config'][$name])) return $GLOBALS['config'][$name]; else return $GLOBALS['config']["frameworkpath"]; } function I($name) { return $GLOBALS['config'][$name]; } function J() { $arg = func_get_args(); if(is_object($arg[0])) { $controller=get_class($arg[0]); $controller=substr($controller,0,-6); C("router")->controller=$controller; if($arg[1]=='') $arg[1]=$GLOBALS['config']['defaultindex']; C("router")->action=$arg[1]; array_shift($arg); array_shift($arg); }else if(is_string($arg[0])) { if($arg[1]=='') { C("router")->action=$arg[0]; array_shift($arg); }else if(is_array($arg[1])){ C("router")->action=$arg[0]; array_shift($arg); }else{ C("router")->controller=$arg[0]; C("router")->action=$arg[1]; array_shift($arg); array_shift($arg); } } $router=R(C("router")->controller); if(method_exists($router,C("router")->action)) { $router->render(C("router")->action); call_user_func(array($router,C("router")->action),$arg); } } function C($class=null) { if($class==null) return null; if(isset($GLOBALS[$class."class"])) { return $GLOBALS[$class."class"]; }else{ $GLOBALS[$class."class"]=new $class(); return $GLOBALS[$class."class"]; } } function R($router=null) { if($router==null) return null; $router=$router."Router"; if(isset($GLOBALS[$router])) { return $GLOBALS[$router]; }else{ try{ $GLOBALS[$router]=new $router(); }catch (PDOException $e) { echo $e->getMessage(); } return $GLOBALS[$router]; } } function M($table=null) { if($table==null) return null; $table=$table."Model"; if(isset($GLOBALS[$table])) { return $GLOBALS[$table]; }else{ $GLOBALS[$table]=new $table(); return $GLOBALS[$table]; } } function initModelclass($modelname) { $fix=substr($modelname,-4); if($fix=="Base") $modelname=substr($modelname,0,-4); $string="DESCRIBE ".$modelname; $DB=getConnect($modelname); try{ $res=$DB['master']->query($string); $mate =$res->fetchAll(PDO::FETCH_ASSOC); } catch (PDOException $e) { echo $e->getMessage(); } if(is_array($mate)) { $newmodelstr="<?php \n class ".$modelname."Base extends model{ \n "; $fields=array(); $types=array(); $newmodelstr.="  var \$tablename='".$modelname."';"; foreach($mate as $key=>$value) { $value['Field']=strtolower($value['Field']); if($value['Key']=='PRI') { $newmodelstr.="\n var \$PRI='".$value['Field']."';"; if($value['Extra']=='auto_increment') { $newmodelstr.="\n var \$autoid=true;"; }else{ $newmodelstr.="\n var \$autoid=false;"; } } $fields[$value['Field']]=$value['Default']; $types[$value['Field']]=$value['Type']; } $newmodelstr.="\n var \$fields=".var_export($fields,true).";"; $newmodelstr.="\n var \$types=".var_export($types,true).";"; $newmodelstr.="\n}\n?>"; } file_put_contents(P("modelpath")."model/".$modelname.'Base.class.php',$newmodelstr); } function __autoload($class_name) { $fix=substr($class_name,-5); if($fix=='Model'){ $newc=substr($class_name,0,-5); if(file_exists(P("webprojectpath")."model/".$class_name.".class.php")) { require_once P("webprojectpath")."model/".$class_name.".class.php"; return; }elseif(file_exists(P("modelpath")."model/".$class_name.".class.php")){ require_once P("modelpath")."model/".$class_name.".class.php"; return; }else{ $newmodelstr="<?php \nclass ".$newc."Model extends ".$newc."Base{ \n "; $newmodelstr.=" var \$mapper=array();\n"; $newmodelstr.=" var \$maps;\n"; $newmodelstr.=" var \$maparray=array();\n"; $newmodelstr.=" \n} \n?>"; file_put_contents(P("modelpath")."model/".$newc.'Model.class.php',$newmodelstr); require_once P("modelpath")."model/".$newc.'Model.class.php'; return; } } $fix=substr($class_name,-4); if($fix=='Base'){ $newc=substr($class_name,0,-4); if(!file_exists(P("modelpath")."model/".$newc.'Base.class.php')&&!file_exists(P("webprojectpath")."model/".$newc.'Base.class.php')) { initModelclass($newc); clearstatcache(); } if(file_exists(P("webprojectpath")."model/".$newc.'Base.class.php')) { require_once P("webprojectpath")."model/".$newc.'Base.class.php'; return; }elseif(file_exists(P("modelpath")."model/".$newc.'Base.class.php')){ require_once P("modelpath")."model/".$newc.'Base.class.php'; return; } } $fix=substr($class_name,-6); if($fix=='Router'){ $newc=substr($class_name,0,-6); if(file_exists(P("webprojectpath")."router/".$newc."Router.class.php")) { require_once P("webprojectpath")."router/".$newc."Router.class.php"; return; }elseif(file_exists(P("routerpath")."router/".$newc."Router.class.php")){ require_once P("routerpath")."router/".$newc."Router.class.php"; return; } } if(isset($GLOBALS['config']['frameworklib'][$class_name])){ require_once $GLOBALS['config']['frameworklib'][$class_name]; return; } if(file_exists(P("webprojectpath")."class/".$class_name.'.class.php')) { require_once P("webprojectpath")."class/".$class_name.'.class.php'; return; } if(file_exists(P("frameworkpath")."class/".$class_name.'.class.php')) { require_once P("frameworkpath")."class/".$class_name.'.class.php'; return; } if(file_exists(P("frameworkpath").$class_name.'.php')) { require_once P("frameworkpath").$class_name.'.php'; return; } if(is_array($GLOBALS['config']['frameworklib'])) { foreach($GLOBALS['config']['frameworklib'] as $k=>$v) { if(is_numeric($k)) { if(preg_match("@".$class_name."\.(class\.)?php$@i",$v)){ require_once $v; return; } } } } } function url_for() { $arg_list = func_get_args(); return $arg_list[0]; } 
class Router { public $request_uri; public $routes; public $controller, $controller_name; public $action, $id; public $params; public $route_found = false; public $rules=array(); public $urlcontroller; public function __construct() { self::getPathInfo(); $this->request_uri = $_SERVER['PATH_INFO']; $this->routes = array(); } public function map($controller,$rule, $target=array(), $conditions=array()) { $this->routes[$controller] = new Route($rule, $this->request_uri, $target, $conditions); if($this->routes[$controller]->is_matched) $this->set_route($this->routes[$controller]); return $this; } public function RuleCheck($controller) { if(isset($this->rules[$controller])) return $this->rules[$controller]; else return false; } public function start() { $paths = explode("/",trim($_SERVER['PATH_INFO'],'/')); $controller=array_shift($paths); if(!empty($controller)){ $this->urlcontroller=$controller; $rule=$this->RuleCheck($controller); }else{ if(isset($_GET['router'])) { $controller=$_GET['router']; $this->controller =$_GET['router']; unset($_GET['router']); $this->urlcontroller=$controller; } if(isset($_GET['action'])) { $this->action =$_GET['action']; unset($_GET['action']); }else{ $this->action = $GLOBALS['config']['defaultindex']; } } if($rule){ $this->map($controller,$rule['rule'],$rule['target'],$rule['conditions']); if(!$this->routes[$controller]->is_matched){ $this->controller=$controller; $this->action=array_shift($paths); }else{ return $this; } }else{ if(empty($controller)) { $this->controller = $GLOBALS['config']['defaultrouter']; $this->action = $GLOBALS['config']['defaultindex']; $this->id = null; }else{ $this->controller=$controller; if($this->action==null) $this->action=array_shift($paths); } } if(is_numeric($paths[0])) { $this->id=array_shift($paths); $_GET['id']=$this->id; } for($i=0;$i<count($paths);$i++) $_GET[$paths[$i]]=$paths[++$i]; return $this; } public function setMaps($rules) { if(is_array($this->rules)&&is_array($rules)) { $this->rules = array_merge($this->rules,$rules); }elseif(is_object($rules)){ foreach($rules as $key =>$val) $this->rules[$key] = $val; }elseif(is_array($rules)){ $this->rules=$rules; } return $this; } public function ruleMaps($rulename,$rule=null, $target=array(), $conditions=array()) { if(is_array($rulename)) { foreach($rulename as $k=>$v) { $this->rules[$k]=$v; } }else if($rule==null){ $this->rules[$rulename]=array("rule"=>"/".$rulename); }else{ $this->rules[$rulename]=array("rule"=>$rule, "target"=>$target, "conditions"=>$conditions); } return $this; } public function clearruleMaps() { if(!file_exists($GLOBALS['config']["frameworkpath"]."cache/".$GLOBALS['config']["webprojectname"]."rule.cache.php")) { @unlink($GLOBALS['config']["frameworkpath"]."cache/".$GLOBALS['config']["webprojectname"]."rule.cache.php"); } return $this; } public function cacheruleMaps() { file_put_contents($GLOBALS['config']["frameworkpath"]."cache/".$GLOBALS['config']["webprojectname"]."rule.cache.php","<?php return ".var_export($this->rules,TRUE)."; ?>"); return $this; } private function set_route($route) { $this->route_found = true; $params = $route->params; $this->controller = $params['controller']; unset($params['controller']); $this->action = $params['action']; unset($params['action']); $this->id = $params['id']; if(is_numeric($this->controller)&&$this->id==null){ $this->id=$this->controller; $this->controller=null; $params['id']=$this->id; } if(is_numeric($this->action)&&$this->id==null){ $this->id=$this->action; $this->action=null; $params['id']=$this->id; } $this->params = array_merge($params, $_GET); $_GET=$this->params; if (empty($this->controller)) $this->controller = $GLOBALS['config']['defaultrouter']; if (empty($this->action)) $this->action = $GLOBALS['config']['defaultindex']; if (empty($this->id)) $this->id = null; $w = explode('_', $this->controller); foreach($w as $k => $v) $w[$k] = ucfirst($v); $this->controller_name = implode('', $w); } private function getPathInfo() { if(!empty($_SERVER['PATH_INFO'])){ $pathInfo = $_SERVER['PATH_INFO']; if(0 === strpos($pathInfo,$_SERVER['SCRIPT_NAME'])) $path = substr($pathInfo, strlen($_SERVER['SCRIPT_NAME'])); else $path = $pathInfo; }elseif(!empty($_SERVER['ORIG_PATH_INFO'])) { $pathInfo = $_SERVER['ORIG_PATH_INFO']; if(0 === strpos($pathInfo, $_SERVER['SCRIPT_NAME'])) $path = substr($pathInfo, strlen($_SERVER['SCRIPT_NAME'])); else $path = $pathInfo; }elseif (!empty($_SERVER['REDIRECT_PATH_INFO'])){ $path = $_SERVER['REDIRECT_PATH_INFO']; }elseif(!empty($_SERVER["REDIRECT_Url"])){ $path = $_SERVER["REDIRECT_Url"]; if(empty($_SERVER['QUERY_STRING']) || $_SERVER['QUERY_STRING'] == $_SERVER["REDIRECT_QUERY_STRING"]) { $parsedUrl = parse_url($_SERVER["REQUEST_URI"]); if(!empty($parsedUrl['query'])) { $_SERVER['QUERY_STRING'] = $parsedUrl['query']; parse_str($parsedUrl['query'], $GET); $_GET = array_merge($_GET, $GET); reset($_GET); }else { unset($_SERVER['QUERY_STRING']); } reset($_SERVER); } }elseif(!empty($_SERVER["REDIRECT_URL"])){ $path = $_SERVER["REDIRECT_URL"]; if(empty($_SERVER['QUERY_STRING']) || $_SERVER['QUERY_STRING'] == $_SERVER["REDIRECT_QUERY_STRING"]) { $parsedUrl = parse_url($_SERVER["REQUEST_URI"]); if(!empty($parsedUrl['query'])) { $_SERVER['QUERY_STRING'] = $parsedUrl['query']; parse_str($parsedUrl['query'], $GET); $_GET = array_merge($_GET, $GET); reset($_GET); }else { unset($_SERVER['QUERY_STRING']); } reset($_SERVER); } } $_SERVER['PATH_INFO'] = empty($path) ? '/' : $path; return $this; } } class Route { public $is_matched = false; public $params; public $url; private $conditions; function __construct($url, $request_uri, $target, $conditions) { $this->url = $url; $this->params = array(); $this->conditions = $conditions; $p_names = array(); $p_values = array(); preg_match_all('@:([\w]+)@', $url, $p_names, PREG_PATTERN_ORDER); $p_names = $p_names[0]; $url_regex = preg_replace_callback('@:[\w]+@', array($this, 'regex_url'), $url); $url_regex .= '/?'; if (preg_match('@^' . $url_regex . '@', $request_uri, $p_values)) { $sub=array_shift($p_values); $sub=substr($request_uri,strlen($sub)); foreach($p_names as $index => $value) $this->params[substr($value,1)] = urldecode($p_values[$index]); preg_replace('@(\w+)/([^,\/]+)@e', '$this->params[\'\\1\']="\\2";',$sub); foreach($target as $key => $value) $this->params[$key] = $value; $this->is_matched = true; } unset($p_names); unset($p_values); } function regex_url($matches) { $key = str_replace(':', '', $matches[0]); if (array_key_exists($key, $this->conditions)) { return '('.$this->conditions[$key].')'; } else { return '([a-zA-Z0-9_\+\-%]+)'; } } } 
class view{ var $vvar=array(); public function assign($name,$value=''){ if(is_array($name)) { $this->vvar = array_merge($this->vvar,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) $this->vvar[$key] = $val; }else { $this->vvar[$name] = $value; } } public function get($name){ if(isset($this->vvar[$name])) return $this->vvar[$name]; else return false; } public function display($viewfile='index') { echo $this->fetch($viewfile); } public function fetch($viewfile='',$display=false) { $content =""; if(I("view")=='') { if(file_exists(P("webprojectpath")."view/".$viewfile.".php")) $viewfile=P("webprojectpath")."view/".$viewfile.".php"; elseif(file_exists(P("webprojectpath")."view/".C("router")->controller."/".$viewfile.".php")) $viewfile=P("webprojectpath")."view/".C("router")->controller."/".$viewfile.".php"; elseif(file_exists(P("viewpath")."view/".$viewfile.".php")) $viewfile=P("viewpath")."view/".$viewfile.".php"; elseif(file_exists(P("viewpath")."view/".C("router")->controller."/".$viewfile.".php")) $viewfile=P("viewpath")."view/".C("router")->controller."/".$viewfile.".php"; ob_start(); ob_implicit_flush(0); extract($this->vvar, EXTR_OVERWRITE); include $viewfile; $content = ob_get_clean(); }elseif(I("view")=="Smarty") { $Smarty=C("Smarty"); $Smarty->assign($this->vvar); $content=$Smarty->fetch($viewfile); } return $content; } } 
class controller{ var $render; function assign($name,$value=null) { C("view")->assign($name,$value); } function render($view) { $this->render=$view; } function fetch($view) { return C("view")->fetch($view); } function view($view='') { if($this->render) return $this->render; return $view; } function __set($name,$value) { C("view")->assign($name,$value); } function __get($name) { C("view")->get($name); } } ?>