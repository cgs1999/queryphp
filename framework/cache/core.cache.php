<?php
 class Model { public $tablename; public $fields=array(); public $types=array(); public $PRI; public $data; public $autoid=false; private $sql=array(); public $string; private $DB=array(); private $res=null; private $record=array(); public $conn=0; public $objpoint=0; public $modelname; public $databasename; public $ismapper; public $isjoinleft; public $after; public $before; public function __construct() { $this->modelname=substr(get_class($this),0,-5); $this->DB=getConnect($this->getTableName(),$this->modelname,$this->conn); return $this; } public function switchDB($model) { $this->DB=getConnect($this->tablename,$model,$this->conn); return $this; } public function getMate() { $this->string="DESCRIBE ".$this->tablename; try{ $this->res=$this->DB['master']->query($this->string); $result = $this->res->fetchAll(PDO::FETCH_ASSOC); } catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1001); } return $result; } public function fieldsTable() { $mate=$this->getMate(); if(is_array($mate)) { foreach($mate as $key=>$value) { $value['Field']=strtolower($value['Field']); if($value['Key']=='PRI') { $this->PRI=$value['Field']; if($value['Extra']=='auto_increment') $this->autoid=true; } $this->fields[$value['Field']]=$value['Default']; $this->types[$value['Field']]=$value['Type']; } } } public function create() { $numargs = func_num_args(); if ($numargs==1&&is_array(func_get_arg(0))) { $prefields=func_get_arg(0); foreach($prefields as $k=>$v) { if(isset($this->fields[$v])) { $this->data[$v]=$_POST[$v]; } } }elseif($numargs==0){ foreach($this->fields as $k=>$v) { if(isset($_POST[$k])) { $this->data[$k]=$_POST[$k]; } } }elseif(is_array(func_get_arg())) { $arg_list = func_get_args(); if(!isset($arg_list[2])) { $filedarray=explode(",",$arglist[1]); } $arg0=func_get_arg(0); for ($i = 1; $i < $numargs; $i++) { if(isset($arg_list[2])) { if(isset($this->fields[$arg_list[$i]])) { $this->data[$v]=$arg0[$arg_list[$i]]; } }else{ $this->data[$v]=$arg0[$filedarray[--$i]]; } } }else{ if('fix'==func_get_arg(0)) { $fix=func_get_arg(1); foreach($this->fields as $k=>$v) { if(isset($_POST[$k])) { $this->data[$k]=$_POST[$k]; } if(isset($fix[$k])&&isset($_POST[$fix[$k]])) { $this->data[$k]=$_POST[$fix[$k]]; } } } } return $this; } public function __get($name) { if(isset($this->data[strtolower($name)])) { return $this->data[strtolower($name)]; }elseif(isset($this->mapper[$name])){ if(method_exists($this,$this->mapper[$name]['map'])) { call_user_func(array($this,$this->mapper[$name]['map']),$name); } $this->ismapper=true; return $this->maps[$mapper]=M($this->mapper[$name]['TargetModel']); }else{ if(count($this->record)>0) { $this->objpoint=0; $this->edit(0); if(isset($this->data[strtolower($name)])) return $this->data[strtolower($name)]; } return null; } } public function __set($name,$value) { if(isset($this->types[strtolower($name)])) { return $this->data[strtolower($name)]=$value; }elseif(isset($this->mapper[$name])){ $this->ismapper=true; $this->promaparray($name,$value); return $this; }else{ return null; } } public function __isset($name) { return isset($this->data[strtolower($name)]); } private function __unset($name) { unset($this->data[strtolower($name)]); } public function getOne() { $arg_list = func_get_args(); $arg_list=$arg_list[0]; $numargs=count($arg_list); $pkey=''; $fields="*"; $order=''; $i=0; if(strtoupper($arg_list[$i])=="FETCH_OBJ") { $returnobj=PDO::FETCH_OBJ; $i++; }else{ $returnobj=PDO::FETCH_ASSOC; } if(!is_numeric($arg_list[$i])) { if(isset($arg_list[$i])) { $fields=$arg_list[$i]; $i=1; } } for (; $i < $numargs; $i++) { $t=strtoupper($arg_list[$i]); if($t=="DESC"||$t=="ASC") { if(empty($this->sql['orderby'])) $this->sql['orderby']=" order by ".$this->PRI." ".$t; }else if($t=="FETCH_OBJ"){ $returnobj=PDO::FETCH_OBJ; }else $pkey.=intval($arg_list[$i]).","; } if($pkey!='') $pkey=substr($pkey,0,-1); if($pkey=='') $pkey=1; $pkey=$this->PRI." IN (".$pkey.")"; if(isset($this->sql['fields'])) { $fields=$this->sql['fields']; } if(empty($order)) $order=isset($this->sql['orderby'])?$this->sql['orderby']:null; $this->string="select ".$fields." from ".$this->tablename." where ".$pkey.$order; try{ $res=$this->DB['slaves']->query($this->string); $this->record=$res->fetchAll($returnobj); $this->data=$this->record[0]; $this->objpoint=0; $this->sql=array(); return $this; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1002); } } public function getAllArray() { $arg_list = func_get_args(); $arg_list=$arg_list[0]; $numargs=count($arg_list); $pkey=''; $fields="*"; $returnobj=PDO::FETCH_ASSOC; for ($i=0; $i < $numargs; $i++) { $t=strtoupper($arg_list[$i]); if($t=="DESC"||$t=="ASC") { if(empty($this->sql['orderby'])) $this->sql['orderby']=" order by ".$this->PRI." ".$t; }else if($t=="FETCH_OBJ"){ $returnobj=PDO::FETCH_OBJ; }else if(is_numeric($arg_list[$i])){ $this->where($this->PRI."='".$arg_list[$i]."'"); }else $fields=$arg_list[$i]; } if(empty($this->sql['where'])) $this->sql['where']=" where 1 "; if(isset($this->sql['fields'])) { $fields=$this->sql['fields']; } if(!isset($this->sql['groupby'])) { $this->sql['groupby']=''; } if(!isset($this->sql['orderby'])) { $this->sql['orderby']=''; } $this->string="select ".$fields." from ".$this->tablename." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby']; try{ $res=$this->DB['slaves']->query($this->string); $this->record=$res->fetchAll($returnobj); $this->data=$this->record[0]; $this->objpoint=0; $this->sql=array(); return $this; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1003); } } public function pkkey() { return $this->PRI; } public function newRecord($data=array()) { $this->data=array(); $this->getFillFields($data); if($this->autoid) unset($this->data[$this->PRI]); return $this; } public function copyRecord($id='') { if($id!='') { $this->getOne(intval($id)); $this->edit(); } if($this->autoid) unset($this->data[$this->PRI]); return $this; } public function updatemaper() { foreach($this->maparray as $m=>$v) { if(count($v)>0) { $mname=$this->mapper[$m]['TargetModel']; $tm=M($mname); foreach($v as $key=>$value) { $fields=$this->getlocalPRIFields($m,$tm->PRI); if($fields!=''&&isset($this->maparray[$m][$key][$tm->PRI])&&$this->maparray[$m][$key][$tm->PRI]!=NULL) { $this->setMapperToData($m); $this->data[$fields]=$this->maparray[$m][$key][$tm->PRI]; } } } } return $this; } public function updatemaperafter() { foreach($this->maparray as $m=>$v) { $mapperid=''; $mname=$this->mapper[$m]['TargetModel']; foreach($v as $key=>$value) { $value=M($mname)->getFillFields($value); $fields=$this->gettargetPRIFields($m,$this->PRI); $this->maparray[$m][$key][$fields]=$this->pkid(); $value[$fields]=$this->pkid(); M($mname)->clearEdit($value); M($mname)->save(); $mapperid=M($mname)->pkid(); $this->maparray[$m][$key][M($mname)->PRI]=M($mname)->pkid(); } $fields=$this->getlocalPRIFields($m,M($mname)->PRI); if($fields!=''&&$mapperid!=''){ $this->data[$fields]=$mapperid; $this->update($fields); } } M($mname)->record=$this->maparray; $this->maparray=array(); $this->ismapper=false; unset($this->ismapper); return $this; } public function update() { $arglist=func_get_args(); $argnum=func_num_args(); if($argnum==0){ return $this->save(); } if(!is_array($arglist[0])&&!is_object($arglist[0])) { $filedarray=explode(",",$arglist[0]); if(is_array($arglist[1])) { $sql=""; $i=0; foreach($arglist[1] as $key=>$value) { if(is_numeric($key)) { if(isset($filedarray[$i])) $sql.=$filedarray[$i]."='".$value."',"; }else{ $sql.=$key."='".$value."',"; } $i++; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if($this->sql['where']=='') { if(isset($arglist[1][$this->PRI])) { $this->where($this->PRI."='".$arglist[1][$this->PRI]."'"); }else $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); } if(!isset($arglist[2])) { $this->setData($arglist[1]); } }elseif(!isset($arglist[1])){ $sql=""; foreach($filedarray as $value) { $sql.=$value."='".$this->data[$value]."',"; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if(empty($this->sql['where'])) { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); } } }elseif(is_array($arglist[0])){ $sql=""; foreach($arglist[0] as $key=>$value) { $sql.=$key."='".$value."',"; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if(empty($this->sql['where'])) { if(isset($arglist[0][$this->PRI])) { $this->where($this->PRI."='".$arglist[0][$this->PRI]."'"); }else $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); if(!isset($arglist[1])) { $this->setData($arglist[0]); } } }elseif(is_object($arglist[0])) { $objectname=get_class($arglist[0]); $objectname=substr($objectname,0,-5); $mapper=''; if(count($this->mapper)>0&&$objectname!='') { $localfields=''; foreach($this->mapper as $k=>$v) { if($v['TargetModel']==$objectname) { $mapper=$k; $this->objsaveper($mapper); $t=$this->setMapperToData($mapper)->getlocalPRIFields($mapper,M($objectname)->PRI); if($t!='') $localfields.=$t.","; } } if($mapper!='') { if($localfields!='') { $localfields=substr($localfields,0,-1); $this->update($localfields); } } } if($mapper=='') { $arrays=get_object_vars($arglist[0]); $sql=''; foreach($arrays as $key=>$value) { $sql.=$key."='".$value."',"; } if($sql!='') { $this->string="UPDATE ".$this->tablename." set ".substr($sql,0,-1); if(empty($this->sql['where'])) { if(isset($arrays[$this->PRI])) { $this->where($this->PRI."='".$arrays[$this->PRI]."'"); }else $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } $this->string.=" ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); } if(!isset($arglist[1])) { $this->setData($arrays); } } } return $this; } public function getMappertargetFields($mapper) { $fileds=''; if(is_array($this->mapper[$mapper]['mapping'])) { $fileds=array_values($this->mapper[$mapper]['mapping']); if(empty($fileds)) Return ''; else { Return implode(",",$fileds); } } return ''; } public function getMapperlocalFields($mapper) { $fileds=''; if(is_array($this->mapper[$mapper]['mapping'])) { $fileds=array_keys($this->mapper[$mapper]['mapping']); if(empty($fileds)) Return ''; else { Return implode(",",$fileds); } } Return ''; } public function gettargetPRIFields($mapper,$PRI) { if(is_array($this->mapper[$mapper]['mapping'])) { if(isset($this->mapper[$mapper]['mapping'][$PRI])) Return $this->mapper[$mapper]['mapping'][$PRI]; } return ''; } public function getlocalPRIFields($mapper,$PRI) { if(is_array($this->mapper[$mapper]['mapping'])) { $t=array_search($PRI,$this->mapper[$mapper]['mapping']); if($t!=false) return $t; } return ''; } public function setMapperToData($mapper,$args=array(),$PRI=false) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { if($this->PRI==$local) { if($PRI) $this->setData(array($local=>$this->maps[$mapper]->data[$target])); }else{ $this->setData(array($local=>$this->maps[$mapper]->data[$target])); } } }else{ $this->setData(array($this->maps[$mapper]->pkkey()=>$this->maps[$mapper]->pkid())); } if(!Empty($args)) $this->setData($args); return $this; } function objsaveper($mapper) { $this->maps[$mapper]=M($v['TargetModel']); $this->setDataToMapper($mapper); $this->maps[$mapper]->save(); $localfields=$this->setMapperToData($mapper)->getlocalPRIFields($mapper,$this->maps[$mapper]->PRI); if($localfields!='') $this->data[$localfields]=$this->maps[$mapper]->pkid(); return $this; } function save($id=null) { $pkey=''; $mapper=''; $saveafter=array(); if($id=='add'||$id=='new') { }else if(is_numeric($id)) { $pkey=$this->PRI."='".intval($id)."'"; unset($this->data[$this->PRI]); }else if($id=='all') { $pkey='1'; unset($this->data[$this->PRI]); }elseif(is_array($id)){ $this->setData($id); if(isset($this->data[$this->PRI])) $pkey=$this->PRI."='".$this->pkid()."'"; }elseif(is_object($id)){ if($id->modelname!=$this->modelname&&count($this->mapper)>0) { foreach($this->mapper as $k=>$v) { if($id->modelname==$v['TargetModel']) { $this->objsaveper($k); array_push($saveafter,$k); } } } if($this->data[$this->PRI]==0) unset($this->data[$this->PRI]); else $pkey=$this->PRI."='".$this->pkid()."'"; }elseif(is_numeric($this->data[$this->PRI])) { if($this->data[$this->PRI]==0) unset($this->data[$this->PRI]); else $pkey=$this->PRI."='".$this->pkid()."'"; } if($this->ismapper&&count($this->maparray)>0) { $this->updatemaper(); } if($pkey=='') { if($this->autoid) unset($this->data[$this->PRI]); foreach($this->fields as $k=>$v) { if($v!=''&&!isset($this->data[$k])) { if($this->types[$k]=='date') { $this->data[$k]=date("Y-m-d"); }elseif($this->types[$k]=='datetime') { $this->data[$k]=date("Y-m-d H:i:s"); }else{ $this->data[$k]=$v; } } if($this->types[$k]=='date'&&!isset($this->data[$k])) { $this->data[$k]=date("Y-m-d"); }else if($this->types[$k]=='datetime') { $this->data[$k]=date("Y-m-d H:i:s"); } } $this->string="INSERT INTO `".$this->tablename."` ("; $i=0; $temp=''; foreach($this->data as $key=>$value) { if($i==0) { $this->string.="`".$key."`"; $temp="'".$value."'"; }else { $this->string.=",`".$key."`"; $temp.=",'".$value."'"; } $i++; } $this->string.=") VALUES(".$temp.")"; try{ $this->effectrow=$this->DB['master']->exec($this->string); $this->sql=array(); }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1004); } if(isset($this->types[$this->PRI])) { $this->data[$this->PRI]=$this->DB['master']->lastInsertId(); } $pkey=true; }else { $this->string="UPDATE ".$this->tablename." set "; $i=0; foreach($this->data as $key=>$value) { if($i==0) { $this->string.=$key."='".$value."'"; }else { $this->string.=",".$key."='".$value."'"; } $i++; } if(isset($this->sql['where'])) { $pkey.=" and ".substr($this->sql['where'],6,-1); } $this->string.=" where ".$pkey; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); $pkey=false; } if($pkey===true) { if(!Empty($saveafter)) { foreach($saveafter as $v) { $this->save_after($v); } } } if($this->ismapper&&count($this->maparray)>0) { $this->updatemaperafter(); } return $this; } function save_after($mapper) { $fields=$this->gettargetPRIFields($mapper,$this->$PRI); M($this->mapper[$mapper]['TargetModel'])->setData(array($fields=>$this->pkid())); M($this->mapper[$mapper]['TargetModel'])->update($fields); } function clearEdit($data='') { $this->data=array(); $this->setData($data); } function pkid() { if(isset($this->data[$this->PRI])) return $this->data[$this->PRI]; else null; } function newSQL() { $this->sql=array(); $this->effectrow=false; return $this; } function querySQL() { return $this->string; } function select($name) { if(isset($this->sql['fields'])) $this->sql['fields'].=",".$name; else $this->sql['fields']=$name; return $this; } function from($name='') { if($name==''){ $this->sql['from']=$this->tablename; }else{ if(M($name)->getTableName()!=$this->tablename) { $this->sql['isjoinleft']=true; $this->sql[$this->modelname.'.']=$this->tablename."."; $this->sql["fix".$this->modelname.'.']=$this->modelname."."; $this->sql["fix".M($name)->modelname."."]=M($name)->modelname."."; $this->sql[M($name)->modelname."."]=M($name)->modelname."."; if($this->sql['joinmodel']!='') $this->sql['joinmodel'].="|"; $this->sql['joinmodel']=M($name)->modelname."."; $this->sql['from']=$this->getDataBaseName().".".$this->tablename." as ".$this->modelname.",".M($name)->getDataBaseName().".".M($name)->getTableName()." as ".M($name)->modelname; }else $this->sql['from']=$this->tablename; } return $this; } function leftjoin($name,$one=null) { if(isset($this->sql['isjoinleft'])) { $this->sql['isjoinleft']=true; $this->sql[$this->modelname.'.']=$this->tablename."."; $this->sql["fix".$this->modelname.'.']=$this->modelname."."; $this->sql["fix".M($name)->modelname."."]=M($name)->modelname."."; $this->sql[M($name)->modelname."."]=M($name)->modelname."."; if($this->sql['joinmodel']!='') $this->sql['joinmodel'].="|"; $this->sql['joinmodel']=M($name)->modelname."."; $this->sql['from'].=" LEFT JOIN ".M($name)->getDataBaseName().".".M($name)->getTableName()." as ".M($name)->modelname; }else{ $this->sql['isjoinleft']=true; $this->sql[$this->modelname.'.']=$this->tablename."."; $this->sql["fix".$this->modelname.'.']=$this->modelname."."; $this->sql["fix".M($name)->modelname."."]=M($name)->modelname."."; $this->sql[M($name)->modelname."."]=M($name)->modelname."."; if(isset($this->sql['joinmodel'])) $this->sql['joinmodel'].="|"; $this->sql['joinmodel']=M($name)->modelname."."; $this->sql['from']=$this->getDataBaseName().".".$this->tablename." as ".$this->modelname." LEFT JOIN ".M($name)->getDataBaseName().".".M($name)->getTableName()." as ".M($name)->modelname; } return $this; } function joinon($name,$modelname='') { $this->sql['from']=$this->sql['from']." ON ".$name; return $this; } function joinpreon($fields,$t=0,$modelname) { $str=''; for($i=0,$j=0;$i<$t;$i++,$j++) { if(isset($this->sql[$modelname."."])) { $mname=$this->getFixSQL($fields[$i],$modelname).$fields[$i]; }else{ $mname=$this->getFixSQL($fields[$i]).$fields[$i]; } $i++; $fields[$i]=str_replace("'","",$fields[$i]); if(is_numeric($fields[$i])) { $str.=$mname."='".$fields[$i]."'"; }elseif(isset($this->types[$fields[$i]])) { $str.=$mname."=".$this->getFixSQL($fields[$i]).$fields[$i]; }else{ $str.=$mname."=".$this->getFixSQL($fields[$i]).$fields[$i]; } $j++; } return $str; } function joinwhere($name,$modelname) { $fields=preg_split("/( AND | OR )/i",$name,-1,PREG_SPLIT_DELIM_CAPTURE); $count=count($fields); $str=''; for($i=0;$i<$count;$i++) { $field=explode("=",$fields[$i]); if(count($field)==2){ $str.=$this->joinpreon($field,2,$modelname); }else{ $f=strtoupper(trim($fields[$i])); if($f=='AND'||$f=='OR') { $str.=" ".$f." "; }else{ $str.=$fields[$i]; } } } if($str!='') $name=$str; $this->sql['from']=$this->sql['from']." ON ".$name; return $this; } function orderby($name) { if(!preg_match("|\w(\s)\w|",$name)){ $this->sql['orderby']=" order by ".$this->getFixSQL($this->PRI).$this->PRI." ".$name; } else{ $n=explode(" ",trim($name)); $this->sql['orderby']=" order by ".$this->getFixSQL($n[0]).$name; } return $this; } function groupby($name) { $this->sql['groupby']=" group by ".$this->getFixSQL($name).$name; return $this; } function where($name,$value='') { if(empty($this->sql['where'])) $this->sql['where']=" where "; else $this->sql['where'].=" and "; if($value!='') $this->sql['where'].=$this->getFixSQL($name).$name."='".$value."'"; else $this->sql['where'].=$name; return $this; } function whereIn($name,$value) { if(empty($this->sql['where'])) $this->sql['where']=" where ".$this->getFixSQL($name).$name." IN (".$value.")"; else $this->sql['where'].=" and ".$this->getFixSQL($name).$name." IN (".$value.")"; return $this; } function whereLike($name,$value) { if(empty($this->sql['where'])) $this->sql['where']=" where ".$this->getFixSQL($name).$name." like '".$value."'"; else $this->sql['where'].=" and ".$this->getFixSQL($name).$name." like '".$value."'"; return $this; } function whereOr($name,$value='') { if(empty($this->sql['where'])) $this->sql['where']=" where "; else $this->sql['where'].=" OR "; if($value!='') $this->sql['where'].=$this->getFixSQL($name).$name."='".$value."'"; else $this->sql['where'].=$name; return $this; } function whereAnd($name,$value='') { if(empty($this->sql['where'])) $this->sql['where']=" where "; else $this->sql['where'].=" and "; if($value!='') $this->sql['where'].=$this->getFixSQL($name).$name."='".$value."'"; else $this->sql['where'].=$name; return $this; } function limit($start,$end=null) { $this->sql['limit']=" limit ".intval($start); if($end!=null) $this->sql['limit'].=",".intval($end); return $this; } function getFixSQL($fields,$modelname='') { if($modelname=='') $modelname=$this->modelname; $fix=''; if(isset($this->sql['isjoinleft'])) { $fix=$this->sql["fix".$modelname.'.']; if(preg_match ("/".str_replace(".","\.",$fix)."/i",$fields)) $fix=''; } return $fix; } function updateCol($colname,$num=1) { if(isset($this->types[$colname])) { $fix=$num>0?'+':'-'; $num=abs($num); $this->string="update ".$this->tablename." set "."`$colname`=`$colname`".$fix.$num." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby']; try{ $this->effectrow=$this->DB['master']->exec($this->string); $this->sql=array(); return $this; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1005); } }else{ return false; } } function preSQL() { if(empty($this->sql['from'])) { $this->sql['from']=$this->tablename; } if(!isset($this->sql['where'])) $this->sql['where']=' where 1 '; if(!isset($this->sql['groupby'])) $this->sql['groupby']=''; if(!isset($this->sql['orderby'])) $this->sql['orderby']=''; } function count() { $pfields=$this->tablename.".*"; if(empty($this->sql['from'])) { $this->sql['from']=$this->tablename; } if(!isset($this->sql['where'])) $this->sql['where']=' where 1 '; if(!isset($this->sql['groupby'])) $this->sql['groupby']=''; if(!isset($this->sql['orderby'])) $this->sql['orderby']=''; if(isset($this->types[$this->PRI])) $pfields=$this->tablename.".".$this->PRI; $this->string="select count(".$pfields.") as totalnum from ".$this->sql['from']." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby']; try{ $res=$this->DB['master']->query($this->string); $total=$res->fetch(PDO::FETCH_ASSOC); return $total['totalnum']; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1006); } return 0; } public function pager($page,$onepage) { $total= $this->count(); $total_page =ceil($total/$onepage); if (empty($page)) { $this->limit(0,$onepage); }else { if($page>$total_page) $page=$total_page+1; $page = ($page-1)*$onepage; $this->limit($page,intval($onepage)); } Return $this; } function getRecord($i='') { if(count($this->record)>0) { if($i!='') { if($i===true) return new ArrayObject($this->record); if(is_numeric($i)){ return $this->record[$i]; } }else return $this->record; } return null; } function getData($obj=false) { if(count($this->data)>0) { if($obj===true){ return new ArrayObject($this->data); }elseif(is_array($obj)){ $t=array(); foreach($obj as $k) { if(isset($this->types[$k])) { $t[$k]=$this->data[$k]; } } return $t; }else return $this->data; }else{ return null; } } function setData($caseArray) { if(is_object($caseArray)) $caseArray=get_class_vars($caseArray); if(is_array($caseArray)) { foreach($caseArray as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } return $this; }else{ return null; } } function clear() { $this->string="TRUNCATE TABLE `".$this->tablename."`"; $this->sql=array(); $this->record=array(); return $this->DB['master']->exec($this->string); } public function delete($id='') { if(is_numeric($id)) { $this->whereAnd($this->PRI."='".$id."'"); $this->string="DELETE from ".$this->tablename." ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); return $this; }else if($id=='all') { $this->string="TRUNCATE TABLE `".$this->tablename."`"; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); return $this; }elseif(is_object($id)){ $objectname=get_class($id); $objectname=substr($objectname,0,-5); $mapper=''; if(count($this->mapper)>0&&$objectname!='') { $localfields=''; foreach($this->mapper as $k=>$v) { if($v['TargetModel']==$objectname) { $mapper=$k; $this->wheremapper($mapper); break; } } } }elseif(is_array($id)){ $this->whereIn($this->PRI,implode(",",$id)); }else{ if(empty($this->sql['where'])) { $this->where($this->PRI."='".$this->data[$this->PRI]."'"); } } $this->string="DELETE from ".$this->tablename." ".$this->sql['where'].$this->sql['limit']; $this->sql=array(); $this->effectrow=$this->DB['master']->exec($this->string); return $this; } public function cache($cachekey=''){ $this->sql['cachekey']=$cachekey; return $this; } public function isEffect() { if($this->effectrow>1) return $this->effectrow; else false; } public function reset() { $this->objpoint=0; $this->recordend=false; return $this; } public function next() { $p=$this->objpoint+1; $c=count($this->record); if($c>$p){ $this->objpoint++; return $this; }else{ $this->objpoint=$c-1; return $this; } } public function isEmpty() { if(count($this->record)==0) return true; else return false; } public function isEnd() { $p=$this->objpoint+1; $c=count($this->record); if($p>=$c){ if($p>$c) { $this->objpoint=$c>0?$c-1:0; } $this->recordend=true; return true; }else{ return false; } } public function edit($id=null) { if(isset($this->recordend)&&$this->recordend==true){ $this->data=array(); return $this; } $this->data=array(); if(is_array($this->record)) { $this->isEnd(); if($id!=null) $this->objpoint=$id; if(is_object($this->record[$this->objpoint])) { $temp=get_object_vars($this->record[$this->objpoint]); foreach($temp as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } }else if(is_array($this->record[$this->objpoint])) { foreach($this->record[$this->objpoint] as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } } }else if(is_object($this->record)){ $temp=get_object_vars($this->record); foreach($temp as $k=>$v) { if(isset($this->types[$k])) { $this->data[$k]=$v; } } } return $this; } public function query($string,$ms='') { $this->string=$string; $this->sql=array(); if(empty($ms)) return $this->DB['master']->query($this->string); else return $this->DB['slaves']->query($this->string); } public function fetch($fetchobj='') { if(isset($this->sql['fields'])) { $pfields=$this->sql['fields']; }else{ $pfields="*"; } if(empty($this->sql['from'])) { $this->sql['from']=$this->tablename; } if(empty($this->sql['where'])) { $this->where("1"); } if(!isset($this->sql['orderby'])) $this->sql['orderby']=''; if(!isset($this->sql['groupby'])) $this->sql['groupby']=''; if(!isset($this->sql['limit'])) $this->sql['limit']=''; $this->string="select ".$pfields." from ".$this->sql['from']." ".$this->sql['where'].$this->sql['groupby'].$this->sql['orderby'].$this->sql['limit']; try{ $res=$this->DB['slaves']->query($this->string); if($fetchobj=='FETCH_OBJ') { $f=PDO::FETCH_OBJ; $fetchobj=''; }else{ $f=PDO::FETCH_ASSOC; } $this->sql=array(); if(is_object($fetchobj)) { $res->setFetchMode(PDO::FETCH_INTO,$fetchobj); Return $res->fetchAll(PDO::FETCH_INTO); }elseif($fetchobj!=''&&class_exists($fetchobj,false)){ Return $res->fetchAll(PDO::FETCH_CLASS,$fetchobj); }else{ $this->record=$res->fetchAll($f); $this->objpoint=0; if(isset($this->record[0])) $this->data=$this->record[0]; else $this->data=array(); } return $this; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1007); } } public function getDataBaseName() { if(empty($this->databasename)){ $s="SELECT DATABASE() AS name"; $res=$this->DB['slaves']->query($s); $database=$res->fetch(PDO::FETCH_ASSOC); $this->databasename=$database['name']; return $database['name']; }else{ return $this->databasename; } } public function getTableName() { return $this->tablename; } public function selectFileds($fields,$modelname) { $tablename=M($modelname)->getTableName(); $modelname=M($modelname)->modelname; $fields=explode(",",$fields); $selectfiled=''; $numargs=count($fields); for ($i = 0; $i < $numargs; $i++) { $selectfiled.=$modelname.".".$fields[$i].","; } if($selectfiled!='') $selectfiled=substr($selectfiled, 0, -1); else $selectfiled=$modelname.".*"; $this->select($selectfiled); return $this; } public function dataUp($up=true){ if($up){ if($this->record[$this->objpoint][$this->PRI]==$this->pkid()) { $this->record[$this->objpoint]=$this->data; }else{ $this->record[]=$this->data; } }else{ $this->record=array(); $this->record[]=$this->data; } Return $this; } public function ManyhasMany($mapper,$relation=array()) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(count($relation)>0) { $fileds=implode(",",$relation); } if(is_array($this->record)&&isset($this->record[0])) { $n=count($this->record); for($i=0;$i<$n;$i++) { $this->maps[$mapper]->select($fileds); if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->maps[$mapper]->whereAnd($target,$this->record[$i][$local]); } }else{ $this->maps[$mapper]->whereAnd($this->maps[$mapper]->pkkey(),$this->record[$i][$this->pkkey()]); } try{ $this->maps[$mapper]->fetch(); $this->sql=array(); $this->record[$i][$mapper]=$this->maps[$mapper]->record; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1008); } } }elseif(is_array($this->record)) { if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->maps[$mapper]->whereAnd($target,$this->record[$local]); } }else{ $this->maps[$mapper]->whereAnd($this->maps[$mapper]->pkkey(),$this->record[$this->pkkey()]); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->edit(); $this->sql=array(); $this->record[$mapper]=$this->maps[$mapper]->record; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1009); } } return $this; } public function hasMany($mapper,$relation=array()) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(count($relation)>0) { $fileds=implode(",",$relation); $this->maps[$mapper]->select($fileds); } if(is_array($this->record)&&isset($this->record[0])) { $this->maps[$mapper]->select($fileds); $this->isEnd(); if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->maps[$mapper]->whereAnd($target,$this->record[$this->objpoint][$local]); } }else{ $this->maps[$mapper]->whereAnd($this->maps[$mapper]->pkkey(),$this->record[$this->objpoint][$this->pkkey()]); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->edit(); $this->sql=array(); $n=count($this->record); for($i=0;$i<$n;$i++) { $this->record[$i][$mapper]=$this->maps[$mapper]->record; } }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1008); } }elseif(is_array($this->record)) { if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->maps[$mapper]->whereAnd($target,$this->record[$local]); } }else{ $this->maps[$mapper]->whereAnd($this->maps[$mapper]->pkkey(),$this->record[$this->pkkey()]); } try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->edit(); $this->sql=array(); $this->record[$mapper]=$this->maps[$mapper]->record; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1009); } } return $this; } public function hasOne($mapper,$relation=array()) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(count($relation)>0) { $fileds=implode(",",$relation); $this->maps[$mapper]->select($fileds); } if(is_array($this->record)&&isset($this->record[0])) { $this->maps[$mapper]->select($fileds); $this->isEnd(); if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->maps[$mapper]->whereAnd($target,$this->record[$this->objpoint][$local]); } }else{ $this->maps[$mapper]->whereAnd($this->maps[$mapper]->pkkey(),$this->record[$this->objpoint][$this->pkkey()]); } $this->maps[$mapper]->limit(1); try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->edit(); $this->sql=array(); $n=count($this->record); for($i=0;$i<$n;$i++) { $this->record[$i][$mapper]=$this->maps[$mapper]->record; } }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1008); } }elseif(is_array($this->record)) { if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->maps[$mapper]->whereAnd($target,$this->record[$local]); } }else{ $this->maps[$mapper]->whereAnd($this->maps[$mapper]->pkkey(),$this->record[$this->pkkey()]); } $this->maps[$mapper]->limit(1); try{ $this->maps[$mapper]->fetch(); $this->maps[$mapper]->edit(); $this->sql=array(); $this->record[$mapper]=$this->maps[$mapper]->record; }catch (PDOException $e) { throw new mylog('model ['.$e->getMessage()."]".$this->modelname,1009); } } return $this; } public function getFields($obj=false) { if($obj) return new ArrayObject($this->fields); else return $this->fields; } public function getFillFields($data=array()) { $t=array(); foreach($this->fields as $key=>$value) { if(isset($data[$key])) $t[$key]=$data[$key]; else $t[$key]=$value; } return $t; } public function getFormFields($data='') { if($data=='') $data=$this->data; $t=array(); foreach($this->types as $k=>$v) { if(isset($data[$k])) $t[$k]=$data[$k]; } return $t; } public function promaparray($mapper,$maparray) { if(empty($maparray)){ $this->maparray[$mapper]=array(); return $this; } $mapmodel=$this->mapper[$mapper]['TargetModel']; $mpi=count($this->maparray[$mapper]); foreach($maparray as $k=>$v) { if(isset(M($mapmodel)->types[$k])) { $this->maparray[$mapper][$mpi][$k]=$v; }elseif(is_array($v)) { $this->maparray[$mapper][]=M($mapmodel)->getFormFields($v); }elseif(is_object($v)) { $this->maparray[$mapper][]=M($mapmodel)->getFormFields(get_object_vars($v)); } } foreach($this->maparray[$mapper] as $k=>$v) { if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { if(M($mapmodel)->pkkey()!=$target) { if(!isset($this->maparray[$mapper][$k][$target])) $this->maparray[$mapper][$k][$target]=$this->data[$local]; } } } } return $this; } public function setDataToMapper($mapper,$args=array(),$PRI=false) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { if($this->maps[$mapper]->pkkey()==$target) { if($PRI) $this->maps[$mapper]->setData(array($target=>$this->data[$local])); }else{ $this->maps[$mapper]->setData(array($target=>$this->data[$local])); } } } if(!Empty($args)) $this->maps[$mapper]->setData($args); return $this; } public function whereSQL($sub,$Args) { $substr=preg_split("/(AND|OR|LIKE|DY|DD|XY|XD|BD|ISNULL|NOTNULL|IN|NOTIN|NOTEQ|EQ)/",$sub,-1,PREG_SPLIT_DELIM_CAPTURE); $numsub=count($substr); if($numsub>0) { $temp=''; $after=true; for($i=0,$j=0;$i<$numsub;$i++,$j++) { $value=strtolower($substr[$i]); if(isset($this->types[$value])) { $key=++$i; switch($substr[$key]) { case 'AND': case 'EQ': $temp.=$this->getFixSQL($name).$value."='".$Args[$j]."' AND "; break; case 'OR': $temp.=$this->getFixSQL($name).$value."='".$Args[$j]."' OR  "; break; case 'LIKE': $temp.=$this->getFixSQL($name).$value." LIKE '".$Args[$j]."' AND "; break; case 'DY': $temp.=$this->getFixSQL($name).$value.">'".$Args[$j]."' AND "; break; case 'DYOR': $temp.=$this->getFixSQL($name).$value.">'".$Args[$j]."' OR  "; break; case 'DYOR': case 'EQOR': $temp.=$this->getFixSQL($name).$value."='".$Args[$j]."' OR  "; break; case 'DD': $temp.=$this->getFixSQL($name).$value.">='".$Args[$j]."' AND "; break; case 'XY': $temp.=$this->getFixSQL($name).$value."<'".$Args[$j]."' AND "; break; case 'DDOR': $temp.=$this->getFixSQL($name).$value.">='".$Args[$j]."' OR  "; break; case 'XYOR': $temp.=$this->getFixSQL($name).$value."<'".$Args[$j]."' OR  "; break; case 'XD': $temp.=$this->getFixSQL($name).$value."<='".$Args[$j]."' AND "; break; case 'BD': case 'NOTEQ': $temp.=$this->getFixSQL($name).$value."!='".$Args[$j]."' AND "; break; case 'XDOR': $temp.=$this->getFixSQL($name).$value."<='".$Args[$j]."' OR  "; break; case 'BDOR': case 'NOTEQOR': $temp.=$this->getFixSQL($name).$value."!='".$Args[$j]."' OR  "; break; case 'NOTIN': if(is_array($Args[$j])) $temp.=$this->getFixSQL($name).$value." NOTIN (".implode($Args[$j]).") AND "; else $temp.=$this->getFixSQL($name).$value." NOTIN (".$Args[$j].") AND "; break; case 'IN': if(is_array($Args[$j])) $temp.=$this->getFixSQL($name).$value." IN (".implode(",",$Args[$j]).") AND "; else{ $temp.=$this->getFixSQL($name).$value." IN (".$Args[$j].") AND "; } break; case 'ISNULL': $temp.=$this->getFixSQL($name).$value."  IS NULL AND "; break; case 'NOTNULL': $temp.=$this->getFixSQL($name).$value." NOTNULL  AND "; break; default: if($key==$numsub) { $temp.=$this->getFixSQL($name).$value."='".$Args[$j]."'     "; $after=false; } } } } if($temp!='') { if($after) { $temp=substr($temp,0,-4); } $this->whereAnd($temp); } } return $this; } public function wheremapper($mapper) { $this->maps[$mapper]=M($this->mapper[$mapper]['TargetModel']); if(is_array($this->mapper[$mapper]['mapping'])) { foreach($this->mapper[$mapper]['mapping'] as $local=>$target) { $this->whereAnd($local,$this->maps[$mapper]->data[$target]); } }else{ $this->whereAnd($this->pkkey(),$this->maps[$mapper]->data[$this->maps[$mapper]->pkid()]); } return $this; } public function __call($name,$Args) { if($name=='get') return $this->getOne($Args); if($name=='find') return $this->getOne($Args); if($name=='getAll') return $this->getAllArray($Args); if(isset($this->mapper[$name])){ $this->maps[$name]=M($this->mapper[$name]['TargetModel']); if(is_array($Args[0])) { $this->setDataToMapper($name,$Args[0]); }elseif(is_object($Args[0])||empty($Args[0])){ $this->wheremapper($name); return $this; }elseif(method_exists($this,$this->mapper[$name]['map'])) { call_user_func(array($this,$this->mapper[$name]['map']),$name,$Args); } return $this->maps[$name]; } if(substr($name,0,6)=='select') { $sub=substr($name,6); $this->selectFileds($Args['0'],strtolower($sub)); return $this; } if(strtolower(substr($name,0,3))=='set') { $str=substr($name,3); if(isset($this->types[strtolower($str)])) { $this->data[$str]=$Args['0']; return $this; } } if(strtolower(substr($name,0,3))=='get') { $str=strtolower(substr($name,3)); if(isset($this->types[$str])) { return $this->data[$str]; } } if(substr($name,0,5)=='where') { $sub=substr($name,5); if(isset($this->types[strtolower($sub)])) { $this->where(strtolower($sub),$Args['0']); return $this; }else{ $this->whereSQL($sub,$Args); return $this; } } if(substr($name,0,6)=='findBy') { $sub=substr($name,6); if(isset($this->types[strtolower($sub)])) { $this->where(strtolower($sub),$Args['0']); return $this; }else{ $this->whereSQL($sub,$Args); return $this; } } if(substr($name,0,6)=='joinon') { $sub=substr($name,6); $this->joinwhere($Args['0'],$sub); return $this; } } } 
 function PU($fix='/') { Return url_project($fix); } function url_project($fix='/') { if(!isset($GLOBALS['__PROJECT__'])) $GLOBALS['__PROJECT__']=substr($_SERVER["SCRIPT_NAME"],0,strrpos($_SERVER["SCRIPT_NAME"],"/")); Return $GLOBALS['__PROJECT__'].$fix; } function MY() { if(isset($GLOBALS['myUser'])) { return $GLOBALS['myUser']; } $GLOBALS['myUser']=new myUser(); return $GLOBALS['myUser']; } function redirect($url,$msg,$second=0,$o=true) { header("Content-type: text/html; charset=utf-8"); $str='<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta http-equiv="refresh" content="'.$second.';URL='.$url.'"></head><body>'.$msg.'</body></html>'; if($o){ echo $str;exit; } Return $str; } function ACL($acl) { if(isset($GLOBALS[$acl."ACL"])) { return $GLOBALS[$acl."ACL"]; } if(file_exists(P("webprojectpath")."router/acl/".$acl."ACL.class.php")) { require_once P("webprojectpath")."router/acl/".$acl."ACL.class.php"; }elseif(file_exists(P("modelpath")."router/acl/".$acl."ACL.class.php")){ require_once P("modelpath")."router/acl/".$acl."ACL.class.php"; }else{ Return false; } $t=$acl."ACL"; $GLOBALS[$acl."DM"]=new $t(); return $GLOBALS[$acl."DM"]; } function L($str,$model='') { if(I('language')!=I('systemlanuage')) { $url = 'http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=' . urlencode($str) . '&langpair=' . I('systemlanuage') . '%7C' . I('language'); $json_data = file_get_contents($url); $j = json_decode($json_data); if (isset($j->responseStatus) and $j->responseStatus == 200) { $t = $j->responseData->translatedText; Return $t; } } Return $str; } function V() { Return new view(); } function filepath_safe($name) { $except = array('\\',' ', '..', ':', '*', '?', '"', '<', '>', '|'); return str_replace($except,'', $name); } function filename_safe($name) { $except = array('\\', '/', ':', '*', '?', '"', '<', '>', '|'); return str_replace($except, '', $name); } function import($libpath) { if(preg_match("|^@lib|i",$libpath)) { $libpath=str_replace(".","/",substr($libpath,4)).".class.php"; if(checkrequire(P("webprojectpath")."lib".$libpath)) return true; if(checkrequire(P("frameworkpath")."lib".$libpath)) return true; } if(preg_match("|^@plugin|i",$libpath)) { $libpath=str_replace(".","/",substr($libpath,4)).".class.php"; if(checkrequire(P("webprojectpath")."plugin".$libpath)) return true; if(checkrequire(P("frameworkpath")."plugin".$libpath)) return true; } } function checkrequire($files) { if(file_exists($files)) { require_once($files); return true; }else{ return false; } } function pdoconnects($dsn,$connmodel) { try { $GLOBALS['pdolinks'][$connmodel]=new PDO($dsn['dsn'],$dsn['username'],$dsn['password'],array(PDO::MYSQL_ATTR_INIT_COMMAND =>'SET CHARACTER SET '.$dsn['CHARACTER'])); return $GLOBALS['pdolinks'][$connmodel]; } catch (PDOException $e) { print "connects Error!: " . $e->getMessage() . "<br/>"; } } function getConnect($table,$model=null,$connper=0) { $tconn=array(); if(!isset($GLOBALS['pdolinks'])) $GLOBALS['pdolinks']=array(); if(is_array($GLOBALS['config']['pdoconn'])) { foreach($GLOBALS['config']['pdoconn'] as $k=>$v) { if($k==$model||preg_match("|".$k."|i",$table)||preg_match("|".$k."|i",$model)) { $prand=rand(0,count($v["master"])-1); $connmodel=md5(json_encode($v["master"][$prand])); $table_fix=$v["master"][$prand]['table_fix']; if($GLOBALS['pdolinks'][$connmodel]!='') $tconn['master']=$GLOBALS['pdolinks'][$connmodel]; else { $tconn['master']=pdoconnects($v["master"][$prand],$connmodel); } $prand=rand(0,count($v["slaves"])-1); $connmodel=md5(json_encode($v["slaves"][$prand])); if($GLOBALS['pdolinks'][$connmodel]!='') $tconn['slaves']=$GLOBALS['pdolinks'][$connmodel]; else { $tconn['slaves']=pdoconnects($v["slaves"][$prand],$connmodel); } break; } } } if(count($tconn)<2) { $prand=rand(0,count($GLOBALS['config']['pdoconn']['default']["master"])-1); $connmodel=md5(json_encode($GLOBALS['config']['pdoconn']['default']["master"][$prand])); $table_fix=$GLOBALS['config']['pdoconn']['default']["master"][$prand]['table_fix']; if(isset($GLOBALS['pdolinks'][$connmodel])) { $tconn['master']=$GLOBALS['pdolinks'][$connmodel]; }else{ $tconn['master']=pdoconnects($GLOBALS['config']['pdoconn']['default']["master"][$prand],$connmodel); } $prand=rand(0,count($GLOBALS['config']['pdoconn']['default']["slaves"])-1); $connmodel=md5(json_encode($GLOBALS['config']['pdoconn']['default']["slaves"][$prand])); if(isset($GLOBALS['pdolinks'][$connmodel])) $tconn['slaves']=$GLOBALS['pdolinks'][$connmodel]; else { $tconn['slaves']=pdoconnects($GLOBALS['config']['pdoconn']['default']["slaves"][$prand],$connmodel); } } if($connper==1) { return array('master'=>$tconn['master'],'slaves'=>$tconn['slaves'],'table_fix'=>$table_fix); }else if($connper==0) { return array('master'=>$tconn['master'],'slaves'=>$tconn['master'],'table_fix'=>$table_fix); } } function P($name) { if(isset($GLOBALS['config'][$name])) return $GLOBALS['config'][$name]; else return $GLOBALS['config']["frameworkpath"]; } function I($name) { return isset($GLOBALS['config'][$name])?$GLOBALS['config'][$name]:null; } function J() { $arg = func_get_args(); if(is_object($arg[0])) { $controller=get_class($arg[0]); $controller=substr($controller,0,-6); C("router")->controller=$controller; if($arg[1]=='') $arg[1]=$GLOBALS['config']['defaultindex']; C("router")->action=$arg[1]; array_shift($arg); array_shift($arg); }else if(is_string($arg[0])) { if($arg[1]=='') { C("router")->action=$arg[0]; array_shift($arg); }else if(is_array($arg[1])){ C("router")->action=$arg[0]; array_shift($arg); }else{ C("router")->controller=$arg[0]; C("router")->action=$arg[1]; array_shift($arg); array_shift($arg); } } $router=R(C("router")->controller); if(method_exists($router,C("router")->action)) { $router->render(C("router")->action); Return $router->{C("router")->action}($arg); } } function DM($newc) { if(isset($GLOBALS[$newc."DM"])) { return $GLOBALS[$newc."DM"]; } if(file_exists(P("webprojectpath")."model/dm/".$newc."DM.class.php")) { require_once P("webprojectpath")."model/dm/".$newc."DM.class.php"; }elseif(file_exists(P("modelpath")."model/dm/".$newc."DM.class.php")){ require_once P("modelpath")."model/dm/".$newc."DM.class.php"; } $t=$newc."DM"; $GLOBALS[$newc."DM"]=new $t(); return $GLOBALS[$newc."DM"]; } function C($class=null) { if($class==null) return null; if(isset($GLOBALS[$class."class"])) { return $GLOBALS[$class."class"]; }else{ $GLOBALS[$class."class"]=new $class(); return $GLOBALS[$class."class"]; } } function R($router=null) { if($router==null) return null; $router=$router."Router"; if(isset($GLOBALS[$router])) { return $GLOBALS[$router]; }else{ try{ $GLOBALS[$router]=new $router(); }catch (PDOException $e) { echo $e->getMessage(); } return $GLOBALS[$router]; } } function M($modelname=null,$tablename=null) { if($modelname==null) return null; $table=$modelname."Model"; if(isset($GLOBALS[$table])) { return $GLOBALS[$table]; }else{ if(!empty($tablename)) { initModelclass($modelname."Base",$tablename); } $GLOBALS[$table]=new $table(); return $GLOBALS[$table]; } } function initModelclass($modelname,$tablename=null) { $fix=substr($modelname,-4); if($tablename==null) $tablename=$modelname; if($fix=="Base") $modelname=substr($modelname,0,-4); $string="DESCRIBE ".$tablename; $DB=getConnect($tablename,$modelname); try{ $res=$DB['master']->query($string); $mate =$res->fetchAll(PDO::FETCH_ASSOC); } catch (PDOException $e) { echo $e->getMessage(); } if(is_array($mate)) { $newmodelstr="<?php \n class ".$modelname."Base extends model{ \n "; $fields=array(); $types=array(); $newmodelstr.="  var \$tablename='".$tablename."';"; foreach($mate as $key=>$value) { $value['Field']=strtolower($value['Field']); if($value['Key']=='PRI') { $newmodelstr.="\n var \$PRI='".$value['Field']."';"; if($value['Extra']=='auto_increment') { $newmodelstr.="\n var \$autoid=true;"; }else{ $newmodelstr.="\n var \$autoid=false;"; } } $fields[$value['Field']]=$value['Default']; $types[$value['Field']]=$value['Type']; } $newmodelstr.="\n var \$fields=".var_export($fields,true).";"; $newmodelstr.="\n var \$types=".var_export($types,true).";"; $newmodelstr.="\n}\n?>"; } file_put_contents(P("modelpath")."model/".$modelname.'Base.class.php',$newmodelstr); } function __autoload($class_name) { $fix=substr($class_name,-5); if($fix=='Model'){ $newc=substr($class_name,0,-5); if(file_exists(P("webprojectpath")."model/".$class_name.".class.php")) { require_once P("webprojectpath")."model/".$class_name.".class.php"; return; }elseif(file_exists(P("modelpath")."model/".$class_name.".class.php")){ require_once P("modelpath")."model/".$class_name.".class.php"; return; }else{ $newmodelstr="<?php \nclass ".$newc."Model extends ".$newc."Base{ \n "; $newmodelstr.=" var \$mapper=array();\n"; $newmodelstr.=" var \$maps;\n"; $newmodelstr.=" var \$maparray=array();\n"; $newmodelstr.=" \n} \n?>"; file_put_contents(P("modelpath")."model/".$newc.'Model.class.php',$newmodelstr); require_once P("modelpath")."model/".$newc.'Model.class.php'; return; } } $fix=substr($class_name,-4); if($fix=='Base'){ $newc=substr($class_name,0,-4); if(!file_exists(P("modelpath")."model/".$newc.'Base.class.php')&&!file_exists(P("webprojectpath")."model/".$newc.'Base.class.php')) { initModelclass($newc); clearstatcache(); } if(file_exists(P("webprojectpath")."model/".$newc.'Base.class.php')) { require_once P("webprojectpath")."model/".$newc.'Base.class.php'; return; }elseif(file_exists(P("modelpath")."model/".$newc.'Base.class.php')){ require_once P("modelpath")."model/".$newc.'Base.class.php'; return; } } $fix=substr($class_name,-6); if($fix=='Router'){ $newc=substr($class_name,0,-6); if(file_exists(P("webprojectpath")."router/".$newc."Router.class.php")) { require_once P("webprojectpath")."router/".$newc."Router.class.php"; return; }elseif(file_exists(P("routerpath")."router/".$newc."Router.class.php")){ require_once P("routerpath")."router/".$newc."Router.class.php"; return; } } if(isset($GLOBALS['config']['frameworklib'][$class_name])){ require_once $GLOBALS['config']['frameworklib'][$class_name]; return; } if(file_exists(P("webprojectpath")."class/".$class_name.'.class.php')) { require_once P("webprojectpath")."class/".$class_name.'.class.php'; return; } if(file_exists(P("frameworkpath")."class/".$class_name.'.class.php')) { require_once P("frameworkpath")."class/".$class_name.'.class.php'; return; } if(file_exists(P("frameworkpath")."lib/".$class_name."/".$class_name.'.class.php')) { require_once P("frameworkpath")."lib/".$class_name."/".$class_name.'.class.php'; return; } if(file_exists(P("frameworkpath")."lib/".$class_name.'.class.php')) { require_once P("frameworkpath")."lib/".$class_name.'.class.php'; return; } if(file_exists(P("webprojectpath")."lib/".$class_name.'.class.php')) { require_once P("webprojectpath")."lib/".$class_name.'.class.php'; return; } if(file_exists(P("frameworkpath").$class_name.'.php')) { require_once P("frameworkpath").$class_name.'.php'; return; } if(is_array($GLOBALS['config']['frameworklib'])) { foreach($GLOBALS['config']['frameworklib'] as $k=>$v) { if(is_numeric($k)) { if(preg_match("@".$class_name."\.(class\.)?php$@i",$v)){ require_once $v; return; } } } } } function url_for() { $arg_list = func_get_args(); if(C("router")->isPathInfo()===true) { $url=explode("?",$arg_list[0]); $t=explode("/",$url[0]); $u="?router=".array_shift($t)."&action=".array_shift($t); if(is_array($t)) { $n=count($t); for($i=0;$i<$n;$i++) { $u.="&".$t[$i]."=".$t[++$i]; } } if(!empty($url[1])) { $u.="&".$url[1]; } $url=''; $url=$_SERVER["SCRIPT_NAME"].$u; }else{ if($_SERVER["PATH_INFO"]=='/'&&!isset($GLOBALS['config']['html'])) { $url=$_SERVER["SCRIPT_NAME"]."/".$arg_list[0]; }else{ $url=substr($_SERVER["REQUEST_URI"],0,strrpos($_SERVER["REQUEST_URI"],$_SERVER["PATH_INFO"]))."/".$arg_list[0]; } if(isset($GLOBALS['config']['html'])&&(substr($url,-strlen($GLOBALS['config']['html']))!=$GLOBALS['config']['html'])) { if(isset($arg_list[1])&&$arg_list[1]===true) { }else{ $url.=$GLOBALS['config']['html']; if(isset($GLOBALS['config']['realhtml'])) { $url=substr($_SERVER["REQUEST_URI"],0,strrpos($_SERVER["REQUEST_URI"],$_SERVER["PATH_INFO"])).$GLOBALS['config']['realhtml']."/".$arg_list[0].$GLOBALS['config']['html']; } } } } return $url; } 
class mylog extends Exception { public function __construct($message, $code = 0) { parent::__construct($message, $code); ob_start(); print_r($GLOBALS); $str="\n-----------------------------------".$this->getCode()."----------------------------------------\n"; file_put_contents(P("frameworkpath")."log/".date("Y_m_d").".txt", $str.ob_get_clean().$this->__toString().$str, FILE_APPEND); } public function __toString() { return "\n---------------- '".$this->getMessage()."' File: ".$this->getFile()." Line:".$this->getLine()."\nStack trace:\n".$this->getTraceAsString(); } } 
class Router { public $request_uri; public $routes; public $controller, $controller_name; public $action, $id; public $params; public $route_found = false; public $rules=array(); public $urlcontroller; public $isScript=false; public $fixpath; public function __construct() { self::getPathInfo(); if(isset($GLOBALS['config']['realhtml'])) { if(strncasecmp($_SERVER['PATH_INFO'],$GLOBALS['config']['realhtml'],strlen($GLOBALS['config']['realhtml']))==0) $_SERVER['PATH_INFO']=substr($_SERVER['PATH_INFO'],strlen($GLOBALS['config']['realhtml'])); if(strncasecmp($_SERVER["REQUEST_URI"],$_SERVER["SCRIPT_NAME"],strlen($_SERVER["SCRIPT_NAME"]))==0){ $this->isScript=true; $_SERVER["REQUEST_URI"]=substr($_SERVER["REQUEST_URI"],strlen($_SERVER["SCRIPT_NAME"])); if(strncasecmp($_SERVER["REQUEST_URI"],$GLOBALS['config']['realhtml'],strlen($GLOBALS['config']['realhtml']))==0) $_SERVER["REQUEST_URI"]=substr($_SERVER["REQUEST_URI"],strlen($GLOBALS['config']['realhtml'])); $_SERVER["REQUEST_URI"]=$_SERVER["SCRIPT_NAME"].$_SERVER["REQUEST_URI"]; } if(0!==strrpos($_SERVER["SCRIPT_NAME"],"/")) { $this->fixpath=substr($_SERVER["SCRIPT_NAME"],0,strrpos($_SERVER["SCRIPT_NAME"],"/")); if(strncasecmp($_SERVER["REQUEST_URI"],$this->fixpath.$GLOBALS['config']['realhtml'],strlen($this->fixpath.$GLOBALS['config']['realhtml']))==0) { $_SERVER["REQUEST_URI"]=substr($_SERVER["REQUEST_URI"],strlen($this->fixpath.$GLOBALS['config']['realhtml'])); $_SERVER["REQUEST_URI"]=$this->fixpath.$_SERVER["REQUEST_URI"]; } } if(strncasecmp($_SERVER["REQUEST_URI"],$GLOBALS['config']['realhtml'],strlen($GLOBALS['config']['realhtml']))==0) $_SERVER["REQUEST_URI"]=substr($_SERVER["REQUEST_URI"],strlen($GLOBALS['config']['realhtml'])); if(strncasecmp($_SERVER["REDIRECT_URL"],$GLOBALS['config']['realhtml'],strlen($GLOBALS['config']['realhtml']))==0) $_SERVER["REDIRECT_URL"]=substr($_SERVER["REDIRECT_URL"],strlen($GLOBALS['config']['realhtml'])); $this->fixpath.=$GLOBALS['config']['realhtml']; } $this->request_uri = $_SERVER['PATH_INFO']; $this->routes = array(); } public function map($controller,$rule, $target=array(), $conditions=array()) { $this->routes[$controller] = new Route($rule, $this->request_uri, $target, $conditions); if($this->routes[$controller]->is_matched) $this->set_route($this->routes[$controller]); return $this; } public function RuleCheck($controller) { if(isset($this->rules[$controller])) return $this->rules[$controller]; else return false; } public function isPathInfo() { Return $this->urlcontroller; } public function start() { $paths = explode("/",trim($_SERVER['PATH_INFO'],'/')); $controller=array_shift($paths); $rule=array(); if(!empty($controller)){ $this->urlcontroller=false; $rule=$this->RuleCheck($controller); }else{ if(isset($_GET['router'])) { $controller=$_GET['router']; $this->controller =$_GET['router']; unset($_GET['router']); $this->urlcontroller=true; } if(isset($_GET['action'])) { $this->action =$_GET['action']; unset($_GET['action']); }else{ $this->action = $GLOBALS['config']['defaultindex']; } } if($rule){ $this->map($controller,$rule['rule'],$rule['target'],$rule['conditions']); if(!$this->routes[$controller]->is_matched){ $this->controller=$controller; $this->action=array_shift($paths); }else{ return $this; } }else{ if(empty($controller)) { $this->controller = $GLOBALS['config']['defaultrouter']; $this->action = $GLOBALS['config']['defaultindex']; $this->id = null; }else{ $this->controller=$controller; if($this->action==null) $this->action=empty($paths)?$GLOBALS['config']['defaultindex']:array_shift($paths); } } if(isset($paths[0])&&is_numeric($paths[0])) { $this->id=array_shift($paths); $_GET['id']=$this->id; } for($i=0;$i<count($paths);$i++) $_GET[$paths[$i]]=$paths[++$i]; return $this; } public function setMaps($rules) { if(is_array($this->rules)&&is_array($rules)) { $this->rules = array_merge($this->rules,$rules); }elseif(is_object($rules)){ foreach($rules as $key =>$val) $this->rules[$key] = $val; }elseif(is_array($rules)){ $this->rules=$rules; } return $this; } public function ruleMaps($rulename,$rule=null, $target=array(), $conditions=array()) { if(is_array($rulename)) { foreach($rulename as $k=>$v) { $this->rules[$k]=$v; } }else if($rule==null){ $this->rules[$rulename]=array("rule"=>"/".$rulename); }else{ $this->rules[$rulename]=array("rule"=>$rule, "target"=>$target, "conditions"=>$conditions); } return $this; } public function clearruleMaps() { if(!file_exists($GLOBALS['config']["frameworkpath"]."cache/".$GLOBALS['config']["webprojectname"]."rule.cache.php")) { @unlink($GLOBALS['config']["frameworkpath"]."cache/".$GLOBALS['config']["webprojectname"]."rule.cache.php"); } return $this; } public function cacheruleMaps() { file_put_contents($GLOBALS['config']["frameworkpath"]."cache/".$GLOBALS['config']["webprojectname"]."rule.cache.php","<?php return ".var_export($this->rules,TRUE)."; ?>"); return $this; } private function set_route($route) { $this->route_found = true; $params = $route->params; $this->controller = $params['controller']; unset($params['controller']); $this->action = $params['action']; unset($params['action']); $this->id = $params['id']; if(is_numeric($this->controller)&&$this->id==null){ $this->id=$this->controller; $this->controller=null; $params['id']=$this->id; } if(is_numeric($this->action)&&$this->id==null){ $this->id=$this->action; $this->action=null; $params['id']=$this->id; } $this->params = array_merge($params, $_GET); $_GET=$this->params; if (empty($this->controller)) $this->controller = $GLOBALS['config']['defaultrouter']; if (empty($this->action)) $this->action = $GLOBALS['config']['defaultindex']; if (empty($this->id)) $this->id = null; $w = explode('_', $this->controller); foreach($w as $k => $v) $w[$k] = ucfirst($v); $this->controller_name = implode('', $w); } private function getPathInfo() { $path=''; if(!empty($_SERVER['PATH_INFO'])){ $pathInfo = $_SERVER['PATH_INFO']; if(0 === strpos($pathInfo,$_SERVER['SCRIPT_NAME'])) $path = substr($pathInfo, strlen($_SERVER['SCRIPT_NAME'])); else{ $path = $pathInfo; if(0 !== strpos($pathInfo,$_SERVER['SCRIPT_NAME'])&&0 === strpos(isset($_SERVER["REDIRECT_URL"])?$_SERVER["REDIRECT_URL"]:'',dirname($_SERVER['SCRIPT_NAME']))) { $path = substr($_SERVER["REDIRECT_URL"], strlen(dirname($_SERVER['SCRIPT_NAME']))); } } }elseif(!empty($_SERVER['ORIG_PATH_INFO'])) { $pathInfo = $_SERVER['ORIG_PATH_INFO']; if(0 === strpos($pathInfo, $_SERVER['SCRIPT_NAME'])) $path = substr($pathInfo, strlen($_SERVER['SCRIPT_NAME'])); else $path = $pathInfo; }elseif (!empty($_SERVER['REDIRECT_PATH_INFO'])){ $path = $_SERVER['REDIRECT_PATH_INFO']; }elseif(!empty($_SERVER["REDIRECT_Url"])){ $path = $_SERVER["REDIRECT_Url"]; if(empty($_SERVER['QUERY_STRING']) || $_SERVER['QUERY_STRING'] == $_SERVER["REDIRECT_QUERY_STRING"]) { $parsedUrl = parse_url($_SERVER["REQUEST_URI"]); if(!empty($parsedUrl['query'])) { $_SERVER['QUERY_STRING'] = $parsedUrl['query']; parse_str($parsedUrl['query'], $GET); $_GET = array_merge($_GET, $GET); reset($_GET); }else { unset($_SERVER['QUERY_STRING']); } reset($_SERVER); } }elseif(!empty($_SERVER["REDIRECT_URL"])){ $_SERVER["REDIRECT_URL"]=str_replace("//","/",$_SERVER["REDIRECT_URL"]); $_SERVER["REQUEST_URI"]=$_SERVER["REDIRECT_URL"]; $path = $_SERVER["REDIRECT_URL"]; if(empty($_SERVER['QUERY_STRING']) || $_SERVER['QUERY_STRING'] == $_SERVER["REDIRECT_QUERY_STRING"]) { $parsedUrl = parse_url($_SERVER["REQUEST_URI"]); if(!empty($parsedUrl['query'])) { $_SERVER['QUERY_STRING'] = $parsedUrl['query']; parse_str($parsedUrl['query'], $GET); $_GET = array_merge($_GET, $GET); reset($_GET); }else { unset($_SERVER['QUERY_STRING']); } reset($_SERVER); } if(0 !== strpos($pathInfo,$_SERVER['SCRIPT_NAME'])&&0 === strpos($_SERVER["REDIRECT_URL"],dirname($_SERVER['SCRIPT_NAME']))&&dirname($_SERVER['SCRIPT_NAME'])!='/') { $path = substr($_SERVER["REDIRECT_URL"], strlen(dirname($_SERVER['SCRIPT_NAME']))); } } if(isset($GLOBALS['config']['html'])&&$GLOBALS['config']['html']!='') if(substr($path,-strlen($GLOBALS['config']['html']))==$GLOBALS['config']['html']) { $path=substr($path,0,-strlen($GLOBALS['config']['html'])); } $_SERVER['PATH_INFO'] = empty($path) ? '/' : $path; return $this; } } class Route { public $is_matched = false; public $params; public $url; private $conditions; function __construct($url, $request_uri, $target, $conditions) { $this->url = $url; $this->params = array(); $this->conditions = $conditions; $p_names = array(); $p_values = array(); preg_match_all('@:([\w]+)@', $url, $p_names, PREG_PATTERN_ORDER); $p_names = $p_names[0]; $url_regex = preg_replace_callback('@:[\w]+@', array($this, 'regex_url'), $url); $url_regex .= '/?'; if (preg_match('@^' . $url_regex . '@', $request_uri, $p_values)) { $sub=array_shift($p_values); $sub=substr($request_uri,strlen($sub)); foreach($p_names as $index => $value) $this->params[substr($value,1)] = urldecode($p_values[$index]); preg_replace('@(\w+)/([^,\/]+)@e', '$this->params[\'\\1\']="\\2";',$sub); foreach($target as $key => $value) $this->params[$key] = $value; $this->is_matched = true; } unset($p_names); unset($p_values); } function regex_url($matches) { $key = str_replace(':', '', $matches[0]); if (array_key_exists($key, $this->conditions)) { return '('.$this->conditions[$key].')'; } else { return '([a-zA-Z0-9_\+\-%]+)'; } } } 
class view{ var $vvar=array(); protected $content; public function assign($name,$value=''){ if(is_array($name)) { $this->vvar = array_merge($this->vvar,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) $this->vvar[$key] = $val; }else { $this->vvar[$name] = $value; } } public function get($name){ if(isset($this->vvar[$name])) return $this->vvar[$name]; else return false; } public function filter(){} public function display($viewfile='index',$display=true) { $this->content=$this->fetch($viewfile); $this->filter(); if(method_exists(R(C("router")->controller),"view_filter")) { $this->content=call_user_func(array(R(C("router")->controller),"view_filter"),$this->content); } if($display===true){ echo $this->content; }else { Return $this->content; } } public function fetch($viewfile='',$display=false) { $content =""; if(I("view")=='') { if(file_exists(P("webprojectpath")."view/".$viewfile.".php")) $viewfile=P("webprojectpath")."view/".$viewfile.".php"; elseif(file_exists(P("webprojectpath")."view/".C("router")->controller."/".$viewfile.".php")) $viewfile=P("webprojectpath")."view/".C("router")->controller."/".$viewfile.".php"; elseif(file_exists(P("viewpath")."view/".$viewfile.".php")) $viewfile=P("viewpath")."view/".$viewfile.".php"; elseif(file_exists(P("viewpath")."view/".C("router")->controller."/".$viewfile.".php")) $viewfile=P("viewpath")."view/".C("router")->controller."/".$viewfile.".php"; ob_start(); ob_implicit_flush(0); extract($this->vvar, EXTR_OVERWRITE); include $viewfile; $content = ob_get_clean(); }elseif(I("view")=="Smarty") { $Smarty=C("Smarty"); $Smarty->assign($this->vvar); $content=$Smarty->fetch($viewfile); } return $content; } } 
 class sitehtml { static public function realhtml($content,$fileurl) { $filename=filename_safe(basename($fileurl)); $filename=substr($filename,0,-strlen($GLOBALS['config']['html'])).$GLOBALS['config']['html']; try{ mkdir(dirname($fileurl),0777,true); file_put_contents(dirname($fileurl)."/".$filename,$content); }catch (PDOException $e) { throw new mylog('html ['.$e->getMessage()."]".$fileurl,0011); } } } 
 class acl { public $acl=array("all"=>512); public $acldb=false; public $aclid=array("all"=>0); public $pwd=''; public $date=array('begin'=>0,'end'=>0); public $hours=array('begin'=>0,'end'=>0); public $weeks=array('begin'=>0,'end'=>0); public $roledisable=array(); public $error_method=''; public function aclCheck($router,$action='') { if(!isset($this->acl[$action])){ if($this->acl['all']!=0) { $this->acl[$action]=$this->acl['all']; $action='all'; }else{ Return true; } } if($this->acl[$action]==0){ Return true; } if(isset($this->aclid[$action])&&in_array($this->aclid[$action],MY()->acl)) { $this->error=L(" 你没有权限 "); if(empty($this->error_method)){ $this->error_method='noPassport'; } Return false; } $mask=0; if($this->acl[$action]&1) { if(MY()->isLogin()) { $mask=1; }else { $this->error.=L(" 需要登录 "); if(empty($this->error_method)){ $this->error_method='noLogin'; } } } if($this->acl[$action]&2) { if(MY()->isLogin()) { $mask=$mask+2; }else { $this->error.=L(" 需要登录 "); if(empty($this->error_method)){ $this->error_method='noLogin'; } } } if($this->acl[$action]&4) { if(count(array_diff(explode(",",$this->aclgroup[$action]),MY()->group))==0) { $mask=$mask+4; }else { $this->error.=L(" 你没有组的权限 "); if(empty($this->error_method)){ $this->error_method='noGroup'; } } } if($this->acl[$action]&8) { if(count(array_diff(explode(",",$this->aclrole['all'].",".$this->aclrole[$action]),MY()->group))==0) { $mask=$mask+8; }else { $this->error.=L(" 你没有身份访问 "); if(empty($this->error_method)){ $this->error_method='noRole'; } } } if($this->acl[$action]&16) { if(count(array_intersect($this->roledisable,array_merge(MY()->array_multi2single(MY()->grouprole),MY()->role)))==0) { $mask=$mask+16; }else { $this->error.=L(" 你的身份被禁止访问 "); if(empty($this->error_method)){ $this->error_method='noAccess'; } } } if($this->acl[$action]&32) { if($this->checkVisitDate()) { $mask=$mask+32; }else { $this->error.=L(" 不许可访问的日期 "); if(empty($this->error_method)){ $this->error_method='noDate'; } } } if($this->acl[$action]&64) { if($this->checkVisitWeeks()) { $mask=$mask+64; }else { $this->error.=L(" 不许可访问的周日 "); if(empty($this->error_method)){ $this->error_method='noWeek'; } } } if($this->acl[$action]&128) { if($this->checkVisitHours()) { $mask=$mask+128; }else { $this->error.=L(" 不许可访问的时间 "); if(empty($this->error_method)){ $this->error_method='noTime'; } } } if($this->acl[$action]&256) { if(!empty($this->pwd)&&($this->pwd==MY()->modelpwd||$this->pwd==trim($_POST['requestpwd']))) { $mask=$mask+256; }else { MY()->loginfaild++; $this->error.=L(" 要输入密码才能访问 "); if(empty($this->error_method)){ $this->error_method='noPwd'; } } } if($this->acl[$action]&512) { if(MY()->isadmin==true) { $mask=$mask+512; }else { $this->error.=L(" 超级管理使用 "); if(empty($this->error_method)){ $this->error_method='noPassport'; } } } $result=$this->acl[$action]^$mask; if($result==0) { Return true; }else{ Return $result; } } public function checkVisitWeeks() { $now=date("N"); if($this->weeks['begin']<=$now&&$now<=$this->weeks['end']) Return true; else { Return false; } } public function checkVisitHours() { $now=date("H"); if($this->hours['begin']<=$now&&$now<=$this->hours['end']) Return true; else { Return false; } } public function checkVisitDate() { $now=time(); if(strtotime($this->date['begin'])<$now&&$now<strtotime($this->date['end'])) Return true; else { Return false; } } public function noPassport(){ } public function noAcl($mask,$output=true) { $this->{$this->error_method}($mask); if($output) redirect($this->getErrorUrl(),$this->error,3); } function getErrorUrl() { $dispaths=C("router"); if(isset($this->router)&&$this->router!='') { $dispaths->controller=$this->router; }else{ $dispaths->controller="default"; } if(isset($this->router)&&$this->router!='') { $dispaths->action=$this->action; }else{ $dispaths->action="index"; } Return url_for($dispaths->controller."/".$dispaths->action); } public function noLogin() { } public function groupWhere($model,$uidkey) { $model=is_object($model)?$model->modelname:$model; if(empty(MY()->group)) Return false; M($model)->whereIN($uidkey,implode(",",MY()->group)); Return true; } public function userWhere($model,$uidkey) { $model=is_object($model)?$model->modelname:$model; if(empty(MY()->uid)) Return false; M($model)->whereAnd($uidkey,MY()->uid); Return true; } public function noGroup() { } public function noRole() { } public function noAccess() { } public function noDate() { } public function noWeek() { } public function noTime() { } public function noPwd() { Return '<form method=post action="'.url_for(C("router")->controller."/".C("router")->action).'"><INPUT TYPE="text" NAME="requestpwd"><INPUT TYPE="submit"></form>'; } public function isMyUid($uid) { Return MY()->UID()==$uid?true:false; } public function isAdmin() { } } 
class controller{ var $render; var $htmlpath; function assign($name,$value=null) { C("view")->assign($name,$value); } function render($view) { $this->render=$view; } function fetch($view) { return C("view")->fetch($view); } function view($view='') { if($this->render) return $this->render; return $view; } function __set($name,$value) { C("view")->vvar[$name]=$value; } function __get($name) { return C("view")->get($name); } function setHtmlPath($htmlpath) { $this->htmlpath=$htmlpath; } function view_filter($content) { if(C("router")->isPathInfo()||C("router")->isScript) Return $content; if(isset($GLOBALS['config']['html'])&&(substr($_SERVER["REQUEST_URI"],-strlen($GLOBALS['config']['html']))==$GLOBALS['config']['html'])) { if(empty($this->htmlpath)) { if(isset($GLOBALS['config']['realhtml'])) { $this->htmlpath=$GLOBALS['config']['realhtml'].substr($_SERVER["REQUEST_URI"],strlen(substr($_SERVER["SCRIPT_NAME"],0,strrpos($_SERVER["SCRIPT_NAME"],"/")))); }else{ $this->htmlpath=substr($_SERVER["REQUEST_URI"],strlen(substr($_SERVER["SCRIPT_NAME"],0,strrpos($_SERVER["SCRIPT_NAME"],"/")))); } } $this->htmlpath=filepath_safe($this->htmlpath); $htmlpath=$GLOBALS['config']["webprojectpath"].$this->htmlpath; $htmlpath=str_replace("//","/",$htmlpath); if(isset($GLOBALS['config']['htmlcache']['class'])&&class_exists($GLOBALS['config']['htmlcache']['class'])) { call_user_func(array(C($GLOBALS['config']['htmlcache']['class']),$GLOBALS['config']['htmlcache']['method']),$content,$htmlpath); } } Return $content; } } ?>